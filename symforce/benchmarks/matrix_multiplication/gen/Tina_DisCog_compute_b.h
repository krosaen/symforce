// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <Eigen/Sparse>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     x0: Scalar
 *     x1: Scalar
 *
 * Outputs:
 *     result: Matrix11_11
 *
 */
template <typename Scalar>
Eigen::SparseMatrix<Scalar> TinaDiscogComputeB(const Scalar x0, const Scalar x1) {
  // Total ops: 33

  // Input arrays

  // Intermediate terms (8)
  const Scalar _tmp0 = 2 * x0;
  const Scalar _tmp1 = 2 * x1;
  const Scalar _tmp2 = x0 + 2;
  const Scalar _tmp3 = Scalar(1.0) / (x1);
  const Scalar _tmp4 = -x1 - 1;
  const Scalar _tmp5 = _tmp0 * x1;
  const Scalar _tmp6 = x1 - 2;
  const Scalar _tmp7 = (Scalar(1) / Scalar(2)) * x1;

  // Output terms (1)
  static constexpr int kRows_result = 11;
  static constexpr int kCols_result = 11;
  static constexpr int kNumNonZero_result = 44;
  static constexpr int kColPtrs_result[] = {0, 2, 8, 11, 18, 21, 25, 31, 38, 39, 42, 44};
  static constexpr int kRowIndices_result[] = {2, 9, 0,  2, 4, 7, 8, 9,  0, 8,  9, 1, 2, 4, 5,
                                               6, 7, 10, 2, 5, 9, 0, 2,  4, 10, 2, 3, 4, 5, 7,
                                               8, 1, 2,  3, 5, 6, 8, 10, 6, 0,  2, 4, 6, 7};
  Scalar result_empty_value_ptr[44];
  Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
      kRows_result, kCols_result, kNumNonZero_result, kColPtrs_result, kRowIndices_result,
      result_empty_value_ptr);
  Scalar* result_value_ptr = result.valuePtr();

  result_value_ptr[0] = 2;
  result_value_ptr[1] = -2;
  result_value_ptr[2] = _tmp0 + _tmp1;
  result_value_ptr[3] = x1 - 4;
  result_value_ptr[4] = -6;
  result_value_ptr[5] = _tmp2;
  result_value_ptr[6] = _tmp1 + 1;
  result_value_ptr[7] = x1;
  result_value_ptr[8] = 1;
  result_value_ptr[9] = -_tmp2;
  result_value_ptr[10] = -2;
  result_value_ptr[11] = _tmp3 * (x0 + x1);
  result_value_ptr[12] = _tmp4;
  result_value_ptr[13] = 2;
  result_value_ptr[14] = _tmp5;
  result_value_ptr[15] = -_tmp3;
  result_value_ptr[16] = -_tmp0;
  result_value_ptr[17] = x0;
  result_value_ptr[18] = 2;
  result_value_ptr[19] = -1;
  result_value_ptr[20] = Scalar(1.0) * x1;
  result_value_ptr[21] = 1;
  result_value_ptr[22] = -1;
  result_value_ptr[23] = x0;
  result_value_ptr[24] = -1;
  result_value_ptr[25] = 3;
  result_value_ptr[26] = _tmp6;
  result_value_ptr[27] = 2;
  result_value_ptr[28] = -2;
  result_value_ptr[29] = 1;
  result_value_ptr[30] = Scalar(-0.5);
  result_value_ptr[31] = 3;
  result_value_ptr[32] = _tmp4;
  result_value_ptr[33] = 3;
  result_value_ptr[34] = -_tmp5;
  result_value_ptr[35] = _tmp0;
  result_value_ptr[36] = x0;
  result_value_ptr[37] = -_tmp7 * x0;
  result_value_ptr[38] = _tmp7;
  result_value_ptr[39] = 3 - x1;
  result_value_ptr[40] = 2 - x0;
  result_value_ptr[41] = x1;
  result_value_ptr[42] = -2 / _tmp6;
  result_value_ptr[43] = -1;

  return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
