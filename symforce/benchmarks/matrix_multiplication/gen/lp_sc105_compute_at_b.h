// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <Eigen/Sparse>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     x0: Scalar
 *     x1: Scalar
 *
 * Outputs:
 *     result: Matrix163_163
 *
 */
template <typename Scalar>
__attribute__((noinline)) Eigen::SparseMatrix<Scalar> LpSc105ComputeAtB(const Scalar x0,
                                                                        const Scalar x1) {
  // Total ops: 849

  // Input arrays

  // Intermediate terms (209)
  const Scalar _tmp0 = 4 * x1;
  const Scalar _tmp1 = 2 * x1;
  const Scalar _tmp2 = _tmp1 - 2;
  const Scalar _tmp3 = -_tmp2;
  const Scalar _tmp4 = 4 * x0;
  const Scalar _tmp5 = _tmp4 + 2;
  const Scalar _tmp6 = -_tmp4;
  const Scalar _tmp7 = 2 * x0;
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = 6 * x0;
  const Scalar _tmp10 = Scalar(1.0) * x0;
  const Scalar _tmp11 = Scalar(1.0) * x1;
  const Scalar _tmp12 = Scalar(0.5) * x1;
  const Scalar _tmp13 = x0 - 2;
  const Scalar _tmp14 = _tmp13 + x1;
  const Scalar _tmp15 = (Scalar(1) / Scalar(2)) * x1;
  const Scalar _tmp16 = x0 + 2;
  const Scalar _tmp17 = -_tmp9;
  const Scalar _tmp18 = 3 * x1;
  const Scalar _tmp19 = _tmp18 + 3;
  const Scalar _tmp20 = 3 * x0;
  const Scalar _tmp21 = -_tmp18;
  const Scalar _tmp22 = _tmp20 + _tmp21;
  const Scalar _tmp23 = _tmp4 - 4;
  const Scalar _tmp24 = -_tmp1;
  const Scalar _tmp25 = _tmp24 + _tmp7;
  const Scalar _tmp26 = -_tmp25;
  const Scalar _tmp27 = _tmp0 + _tmp4;
  const Scalar _tmp28 = _tmp7 - 4;
  const Scalar _tmp29 = x1 - 1;
  const Scalar _tmp30 = std::pow(x0, Scalar(2));
  const Scalar _tmp31 = _tmp30 - 2;
  const Scalar _tmp32 = Scalar(1.0) / (x1);
  const Scalar _tmp33 = _tmp13 * _tmp32;
  const Scalar _tmp34 = -x0;
  const Scalar _tmp35 = std::pow(x1, Scalar(2));
  const Scalar _tmp36 = _tmp35 * x0;
  const Scalar _tmp37 = -_tmp36;
  const Scalar _tmp38 = x0 + 1;
  const Scalar _tmp39 = _tmp38 * x0;
  const Scalar _tmp40 = -_tmp39;
  const Scalar _tmp41 = _tmp1 + _tmp7;
  const Scalar _tmp42 = _tmp16 * x0;
  const Scalar _tmp43 = -_tmp42;
  const Scalar _tmp44 = _tmp35 * _tmp38;
  const Scalar _tmp45 = x1 + 4;
  const Scalar _tmp46 = x1 + 2;
  const Scalar _tmp47 = _tmp1 * _tmp46;
  const Scalar _tmp48 = -_tmp47;
  const Scalar _tmp49 = _tmp0 * x0;
  const Scalar _tmp50 = -_tmp49;
  const Scalar _tmp51 = x1 + 1;
  const Scalar _tmp52 = _tmp51 * x0;
  const Scalar _tmp53 = -_tmp52;
  const Scalar _tmp54 = 8 * x1;
  const Scalar _tmp55 = _tmp1 + 2;
  const Scalar _tmp56 = x1 - 2;
  const Scalar _tmp57 = _tmp51 * _tmp56;
  const Scalar _tmp58 = _tmp13 * _tmp56;
  const Scalar _tmp59 = std::pow(_tmp13, Scalar(2));
  const Scalar _tmp60 = Scalar(3.0) * x0;
  const Scalar _tmp61 = _tmp29 + x0;
  const Scalar _tmp62 = _tmp7 + 4;
  const Scalar _tmp63 = 4 * _tmp35;
  const Scalar _tmp64 = x1 + 3;
  const Scalar _tmp65 = Scalar(2.0) * x1;
  const Scalar _tmp66 = _tmp34 + _tmp46;
  const Scalar _tmp67 = _tmp56 * x0;
  const Scalar _tmp68 = -x1;
  const Scalar _tmp69 = _tmp68 + x0;
  const Scalar _tmp70 = 6 * x1;
  const Scalar _tmp71 = _tmp56 * x1;
  const Scalar _tmp72 = _tmp29 * x0;
  const Scalar _tmp73 = -_tmp72;
  const Scalar _tmp74 = _tmp24 + x0;
  const Scalar _tmp75 = _tmp1 - 1;
  const Scalar _tmp76 = x0 + 3;
  const Scalar _tmp77 = Scalar(1.0) / (x0);
  const Scalar _tmp78 = _tmp16 * _tmp77;
  const Scalar _tmp79 = -_tmp62;
  const Scalar _tmp80 = 2 * _tmp32;
  const Scalar _tmp81 = _tmp32 * _tmp4;
  const Scalar _tmp82 = 8 * _tmp77;
  const Scalar _tmp83 = _tmp77 * x1;
  const Scalar _tmp84 = -_tmp83;
  const Scalar _tmp85 = -_tmp61;
  const Scalar _tmp86 = _tmp7 + 1;
  const Scalar _tmp87 = 8 * x0;
  const Scalar _tmp88 = -_tmp86;
  const Scalar _tmp89 = _tmp29 * _tmp86;
  const Scalar _tmp90 = x0 - 1;
  const Scalar _tmp91 = _tmp10 * _tmp90;
  const Scalar _tmp92 = 2 * _tmp30;
  const Scalar _tmp93 = 6 * _tmp30;
  const Scalar _tmp94 = _tmp1 + x0;
  const Scalar _tmp95 = _tmp0 * _tmp38;
  const Scalar _tmp96 = _tmp7 - 2;
  const Scalar _tmp97 = _tmp1 - 4;
  const Scalar _tmp98 = -_tmp97;
  const Scalar _tmp99 = _tmp38 * _tmp56;
  const Scalar _tmp100 = -_tmp0;
  const Scalar _tmp101 = _tmp0 + 8;
  const Scalar _tmp102 = _tmp1 + 4;
  const Scalar _tmp103 = -_tmp102;
  const Scalar _tmp104 = x0 * x1;
  const Scalar _tmp105 = -_tmp104;
  const Scalar _tmp106 = _tmp80 + x1;
  const Scalar _tmp107 = _tmp4 + 4;
  const Scalar _tmp108 = -_tmp107;
  const Scalar _tmp109 = 12 * x0;
  const Scalar _tmp110 = _tmp18 - 6;
  const Scalar _tmp111 = _tmp15 + Scalar(1) / Scalar(2);
  const Scalar _tmp112 = _tmp35 + 2;
  const Scalar _tmp113 = _tmp1 + 1;
  const Scalar _tmp114 = _tmp1 * x0;
  const Scalar _tmp115 = -_tmp28;
  const Scalar _tmp116 = _tmp1 * _tmp38;
  const Scalar _tmp117 = _tmp34 + 1;
  const Scalar _tmp118 = -_tmp38;
  const Scalar _tmp119 = _tmp38 + x1;
  const Scalar _tmp120 = _tmp7 + 2;
  const Scalar _tmp121 = Scalar(4.0) * x1;
  const Scalar _tmp122 = 2 * _tmp35;
  const Scalar _tmp123 = -_tmp13;
  const Scalar _tmp124 = -_tmp92;
  const Scalar _tmp125 = _tmp13 * _tmp30;
  const Scalar _tmp126 = _tmp60 + Scalar(-3.0);
  const Scalar _tmp127 = _tmp16 * _tmp30;
  const Scalar _tmp128 = -_tmp30;
  const Scalar _tmp129 = _tmp7 * _tmp90;
  const Scalar _tmp130 = _tmp13 * x1;
  const Scalar _tmp131 = _tmp16 * x1;
  const Scalar _tmp132 = -_tmp131;
  const Scalar _tmp133 = _tmp69 * _tmp90;
  const Scalar _tmp134 = _tmp4 + 8;
  const Scalar _tmp135 = -_tmp29;
  const Scalar _tmp136 = _tmp64 * x0;
  const Scalar _tmp137 = _tmp38 * x1;
  const Scalar _tmp138 = _tmp42 * x1;
  const Scalar _tmp139 = _tmp30 * x1;
  const Scalar _tmp140 = _tmp139 * _tmp90;
  const Scalar _tmp141 = [&]() {
    const Scalar base = x0;
    return base * base * base;
  }();
  const Scalar _tmp142 = _tmp0 + 4;
  const Scalar _tmp143 = -_tmp20;
  const Scalar _tmp144 = _tmp9 + 6;
  const Scalar _tmp145 = _tmp1 * _tmp77;
  const Scalar _tmp146 = _tmp83 + 2;
  const Scalar _tmp147 = _tmp0 - 2;
  const Scalar _tmp148 = _tmp51 * x1;
  const Scalar _tmp149 = x0 - 3;
  const Scalar _tmp150 = _tmp149 * _tmp90;
  const Scalar _tmp151 = _tmp29 * x1;
  const Scalar _tmp152 = _tmp13 * _tmp29;
  const Scalar _tmp153 = -_tmp122;
  const Scalar _tmp154 = _tmp0 * _tmp30;
  const Scalar _tmp155 = -_tmp137;
  const Scalar _tmp156 = 2 * _tmp141;
  const Scalar _tmp157 = Scalar(3.0) * x1;
  const Scalar _tmp158 = _tmp13 * x0;
  const Scalar _tmp159 = -_tmp29 * _tmp38;
  const Scalar _tmp160 = [&]() {
    const Scalar base = x1;
    return base * base * base;
  }();
  const Scalar _tmp161 = -_tmp160;
  const Scalar _tmp162 = -_tmp114;
  const Scalar _tmp163 = x0 + x1;
  const Scalar _tmp164 = 5 * x1;
  const Scalar _tmp165 = _tmp104 - 1;
  const Scalar _tmp166 = Scalar(1.5) * x1;
  const Scalar _tmp167 = -_tmp54 * x0;
  const Scalar _tmp168 = _tmp0 * _tmp61;
  const Scalar _tmp169 = -_tmp51;
  const Scalar _tmp170 = std::pow(_tmp56, Scalar(2));
  const Scalar _tmp171 = -_tmp87;
  const Scalar _tmp172 = _tmp56 * _tmp7;
  const Scalar _tmp173 = -_tmp157;
  const Scalar _tmp174 = _tmp100 + 8;
  const Scalar _tmp175 = _tmp1 * _tmp16;
  const Scalar _tmp176 = _tmp30 * _tmp35;
  const Scalar _tmp177 = -_tmp139;
  const Scalar _tmp178 = -_tmp96;
  const Scalar _tmp179 = -_tmp54;
  const Scalar _tmp180 = _tmp46 * _tmp7;
  const Scalar _tmp181 = -_tmp109;
  const Scalar _tmp182 = -_tmp80;
  const Scalar _tmp183 = _tmp182 + x0;
  const Scalar _tmp184 = -5 * x0;
  const Scalar _tmp185 = -_tmp164;
  const Scalar _tmp186 = _tmp90 * x0;
  const Scalar _tmp187 = -_tmp90 * x1;
  const Scalar _tmp188 = -_tmp99;
  const Scalar _tmp189 = 2 * _tmp77;
  const Scalar _tmp190 = _tmp29 * _tmp90;
  const Scalar _tmp191 = Scalar(5.0) * x0;
  const Scalar _tmp192 = x1 - 3;
  const Scalar _tmp193 = _tmp1 - 6;
  const Scalar _tmp194 = -_tmp193;
  const Scalar _tmp195 = -_tmp35;
  const Scalar _tmp196 = -_tmp151;
  const Scalar _tmp197 = _tmp35 * _tmp7;
  const Scalar _tmp198 = 6 * _tmp77;
  const Scalar _tmp199 = _tmp1 + _tmp4;
  const Scalar _tmp200 = -_tmp122 - _tmp24;
  const Scalar _tmp201 = _tmp35 + _tmp68;
  const Scalar _tmp202 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp203 = -_tmp1 * _tmp56;
  const Scalar _tmp204 = x1 * (_tmp35 - 2);
  const Scalar _tmp205 = _tmp2 * x0;
  const Scalar _tmp206 = -_tmp205;
  const Scalar _tmp207 = _tmp189 + x1;
  const Scalar _tmp208 = _tmp207 * x0;

  // Output terms (1)
  static constexpr int kRows_result = 163;
  static constexpr int kCols_result = 163;
  static constexpr int kNumNonZero_result = 869;
  static constexpr int kColPtrs_result[] = {
      0,   4,   8,   9,   12,  14,  17,  22,  26,  29,  32,  35,  38,  43,  48,  51,  54,  57,  60,
      65,  70,  73,  76,  79,  82,  87,  92,  95,  98,  101, 104, 109, 114, 117, 120, 123, 126, 131,
      136, 139, 142, 144, 144, 148, 153, 156, 159, 159, 160, 162, 166, 169, 172, 175, 178, 183, 187,
      190, 194, 197, 199, 204, 210, 215, 218, 224, 230, 236, 242, 249, 254, 257, 266, 275, 284, 289,
      296, 303, 310, 317, 324, 331, 336, 345, 354, 363, 366, 372, 379, 384, 390, 397, 404, 409, 418,
      426, 434, 438, 445, 451, 458, 465, 472, 479, 484, 492, 501, 508, 512, 518, 525, 532, 538, 545,
      552, 557, 566, 574, 583, 588, 595, 602, 608, 613, 620, 623, 628, 637, 646, 655, 660, 667, 674,
      680, 687, 693, 699, 704, 713, 722, 731, 736, 743, 748, 755, 760, 764, 770, 774, 782, 790, 798,
      803, 806, 811, 816, 821, 828, 834, 839, 848, 855, 865, 869};
  static constexpr int kRowIndices_result[] = {
      0,   60,  61,  62,  1,   60,  61,  62,  2,   3,   65,  68,  4,   69,  5,   67,  70,  6,   68,
      71,  72,  73,  7,   69,  71,  72,  8,   64,  70,  9,   76,  79,  10,  77,  80,  11,  78,  81,
      12,  79,  82,  83,  84,  13,  80,  82,  83,  84,  14,  75,  81,  15,  87,  90,  16,  88,  91,
      17,  89,  92,  18,  90,  93,  94,  95,  19,  91,  93,  94,  95,  20,  86,  92,  21,  98,  101,
      22,  99,  102, 23,  100, 103, 24,  101, 104, 105, 106, 25,  102, 104, 105, 106, 26,  97,  103,
      27,  109, 112, 28,  110, 113, 29,  111, 114, 30,  112, 115, 116, 117, 31,  113, 115, 116, 117,
      32,  108, 114, 33,  120, 123, 34,  121, 124, 35,  122, 125, 36,  123, 126, 127, 128, 37,  124,
      126, 127, 128, 38,  119, 125, 39,  131, 134, 132, 135, 42,  134, 137, 138, 43,  135, 137, 138,
      139, 44,  130, 136, 45,  142, 145, 144, 48,  145, 146, 148, 149, 150, 50,  141, 147, 51,  153,
      156, 52,  154, 157, 53,  155, 158, 54,  156, 159, 160, 161, 55,  157, 159, 160, 56,  152, 158,
      57,  159, 160, 161, 58,  159, 161, 59,  161, 0,   1,   60,  61,  62,  0,   1,   60,  61,  62,
      66,  1,   60,  61,  62,  67,  63,  64,  74,  8,   63,  64,  70,  74,  75,  3,   60,  65,  68,
      71,  76,  4,   61,  66,  69,  72,  77,  5,   62,  67,  70,  73,  78,  3,   6,   65,  68,  71,
      72,  73,  4,   7,   69,  71,  72,  5,   67,  70,  6,   7,   65,  68,  69,  71,  72,  73,  76,
      6,   7,   66,  68,  69,  71,  72,  73,  77,  6,   7,   67,  68,  69,  71,  72,  73,  78,  63,
      64,  74,  75,  85,  14,  64,  74,  75,  81,  85,  86,  9,   65,  71,  76,  79,  82,  87,  10,
      66,  72,  77,  80,  83,  88,  11,  67,  73,  78,  81,  84,  89,  9,   12,  76,  79,  82,  83,
      84,  10,  13,  77,  80,  82,  83,  84,  11,  14,  75,  78,  81,  12,  13,  76,  79,  80,  82,
      83,  84,  87,  12,  13,  77,  79,  80,  82,  83,  84,  88,  12,  13,  78,  79,  80,  82,  83,
      84,  89,  85,  86,  96,  20,  85,  86,  92,  96,  97,  15,  76,  82,  87,  90,  93,  98,  16,
      77,  83,  88,  91,  17,  78,  84,  89,  92,  95,  15,  18,  87,  90,  93,  94,  95,  16,  19,
      88,  91,  93,  94,  95,  17,  20,  86,  89,  92,  18,  19,  87,  90,  91,  93,  94,  95,  98,
      18,  19,  88,  90,  91,  93,  94,  95,  18,  19,  89,  90,  91,  93,  94,  95,  86,  96,  97,
      107, 26,  86,  96,  97,  103, 107, 108, 21,  87,  93,  98,  101, 104, 22,  88,  94,  99,  102,
      105, 110, 23,  89,  95,  100, 103, 106, 111, 21,  24,  98,  101, 104, 105, 106, 22,  25,  99,
      102, 104, 105, 106, 23,  26,  97,  100, 103, 24,  25,  98,  101, 102, 104, 105, 106, 24,  25,
      99,  101, 102, 104, 105, 106, 110, 25,  100, 102, 104, 105, 106, 111, 96,  107, 108, 118, 32,
      107, 108, 114, 118, 119, 27,  98,  104, 109, 112, 115, 120, 28,  99,  105, 110, 113, 116, 121,
      29,  100, 106, 111, 114, 122, 27,  30,  109, 112, 115, 116, 117, 28,  31,  110, 113, 115, 116,
      117, 29,  32,  108, 111, 114, 30,  31,  109, 112, 113, 115, 116, 117, 120, 30,  31,  112, 113,
      115, 116, 117, 121, 30,  31,  111, 112, 113, 115, 116, 117, 122, 107, 108, 118, 119, 129, 38,
      108, 118, 119, 125, 129, 130, 33,  109, 115, 120, 123, 126, 131, 34,  116, 121, 124, 127, 132,
      35,  122, 125, 128, 133, 33,  36,  120, 123, 126, 127, 128, 34,  121, 124, 35,  38,  119, 122,
      125, 36,  37,  120, 123, 124, 126, 127, 128, 131, 36,  37,  121, 123, 124, 126, 127, 128, 132,
      36,  37,  122, 123, 124, 126, 127, 128, 133, 118, 119, 129, 130, 140, 44,  119, 129, 130, 136,
      140, 141, 39,  120, 126, 131, 134, 137, 142, 121, 127, 132, 135, 138, 143, 41,  122, 128, 133,
      136, 139, 144, 39,  42,  131, 134, 137, 138, 43,  132, 135, 137, 138, 139, 41,  44,  130, 133,
      136, 42,  43,  131, 134, 135, 137, 138, 139, 142, 42,  43,  132, 134, 135, 137, 138, 139, 143,
      42,  43,  133, 134, 135, 137, 138, 139, 144, 129, 130, 140, 141, 151, 50,  130, 140, 141, 147,
      151, 152, 45,  142, 145, 148, 153, 46,  132, 138, 143, 146, 149, 154, 133, 139, 144, 150, 155,
      45,  48,  142, 145, 46,  143, 146, 148, 149, 150, 50,  141, 144, 147, 48,  142, 145, 146, 148,
      149, 150, 153, 48,  143, 145, 146, 148, 149, 150, 154, 48,  144, 145, 146, 148, 149, 150, 155,
      140, 141, 151, 152, 162, 56,  152, 158, 51,  142, 148, 153, 156, 52,  143, 149, 154, 157, 53,
      144, 150, 155, 158, 51,  54,  153, 156, 159, 160, 161, 52,  55,  154, 157, 159, 160, 53,  56,
      152, 155, 158, 54,  55,  57,  58,  156, 157, 159, 160, 161, 54,  57,  58,  156, 159, 160, 161,
      54,  55,  57,  58,  59,  156, 157, 159, 160, 161, 59,  151, 161, 162};
  Scalar result_empty_value_ptr[869];
  Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
      kRows_result, kCols_result, kNumNonZero_result, kColPtrs_result, kRowIndices_result,
      result_empty_value_ptr);
  Scalar* result_value_ptr = result.valuePtr();

  result_value_ptr[0] = -2;
  result_value_ptr[1] = _tmp0;
  result_value_ptr[2] = _tmp3;
  result_value_ptr[3] = -_tmp5;
  result_value_ptr[4] = _tmp6;
  result_value_ptr[5] = _tmp8;
  result_value_ptr[6] = _tmp9;
  result_value_ptr[7] = _tmp4;
  result_value_ptr[8] = Scalar(-2.0);
  result_value_ptr[9] = Scalar(-3.0);
  result_value_ptr[10] = _tmp10 - _tmp11;
  result_value_ptr[11] = Scalar(2.0);
  result_value_ptr[12] = _tmp12;
  result_value_ptr[13] = Scalar(0.5) * x0;
  result_value_ptr[14] = _tmp9;
  result_value_ptr[15] = -2;
  result_value_ptr[16] = _tmp14 * _tmp7;
  result_value_ptr[17] = _tmp15 * _tmp2;
  result_value_ptr[18] = _tmp0 - 4;
  result_value_ptr[19] = _tmp13 * _tmp2;
  result_value_ptr[20] = -_tmp16 * _tmp2;
  result_value_ptr[21] = _tmp2;
  result_value_ptr[22] = _tmp17;
  result_value_ptr[23] = _tmp19;
  result_value_ptr[24] = Scalar(-9.0);
  result_value_ptr[25] = _tmp22;
  result_value_ptr[26] = -2;
  result_value_ptr[27] = 2;
  result_value_ptr[28] = 4;
  result_value_ptr[29] = _tmp23;
  result_value_ptr[30] = _tmp4;
  result_value_ptr[31] = -_tmp23;
  result_value_ptr[32] = _tmp26;
  result_value_ptr[33] = -_tmp27;
  result_value_ptr[34] = _tmp0;
  result_value_ptr[35] = _tmp16 * _tmp28;
  result_value_ptr[36] = _tmp28 * _tmp7;
  result_value_ptr[37] = -_tmp28 * _tmp29;
  result_value_ptr[38] = _tmp31 * x0;
  result_value_ptr[39] = -_tmp31 * x1;
  result_value_ptr[40] = -_tmp30 * _tmp31;
  result_value_ptr[41] = _tmp31 * _tmp33;
  result_value_ptr[42] = -_tmp31;
  result_value_ptr[43] = _tmp34;
  result_value_ptr[44] = _tmp37;
  result_value_ptr[45] = _tmp40;
  result_value_ptr[46] = -_tmp41 * x0;
  result_value_ptr[47] = _tmp43;
  result_value_ptr[48] = _tmp44;
  result_value_ptr[49] = -_tmp16 * _tmp36;
  result_value_ptr[50] = x1;
  result_value_ptr[51] = -_tmp1 * _tmp45;
  result_value_ptr[52] = -_tmp29 * _tmp45;
  result_value_ptr[53] = _tmp45 * x0;
  result_value_ptr[54] = _tmp1 * _tmp29;
  result_value_ptr[55] = _tmp48;
  result_value_ptr[56] = _tmp24;
  result_value_ptr[57] = _tmp50;
  result_value_ptr[58] = _tmp6;
  result_value_ptr[59] = _tmp8;
  result_value_ptr[60] = _tmp53;
  result_value_ptr[61] = _tmp54 + 8;
  result_value_ptr[62] = _tmp55;
  result_value_ptr[63] = _tmp57;
  result_value_ptr[64] = -Scalar(1) / Scalar(2) * _tmp52;
  result_value_ptr[65] = _tmp58;
  result_value_ptr[66] = -_tmp13 * _tmp7;
  result_value_ptr[67] = _tmp59;
  result_value_ptr[68] = _tmp60 + Scalar(-6.0);
  result_value_ptr[69] = -_tmp13 * _tmp61;
  result_value_ptr[70] = _tmp44;
  result_value_ptr[71] = _tmp39 * x1;
  result_value_ptr[72] = _tmp11 * _tmp38;
  result_value_ptr[73] = _tmp62;
  result_value_ptr[74] = _tmp1;
  result_value_ptr[75] = 8;
  result_value_ptr[76] = _tmp63;
  result_value_ptr[77] = x1;
  result_value_ptr[78] = _tmp64 * x1;
  result_value_ptr[79] = -_tmp45 * _tmp56;
  result_value_ptr[80] = _tmp45;
  result_value_ptr[81] = _tmp1 + 8;
  result_value_ptr[82] = _tmp49;
  result_value_ptr[83] = _tmp24;
  result_value_ptr[84] = _tmp54;
  result_value_ptr[85] = _tmp1;
  result_value_ptr[86] = _tmp65;
  result_value_ptr[87] = -_tmp56 * _tmp66;
  result_value_ptr[88] = _tmp67;
  result_value_ptr[89] = _tmp56 * _tmp69;
  result_value_ptr[90] = _tmp70 - 12;
  result_value_ptr[91] = _tmp71;
  result_value_ptr[92] = _tmp17;
  result_value_ptr[93] = 24;
  result_value_ptr[94] = -12;
  result_value_ptr[95] = _tmp73;
  result_value_ptr[96] = _tmp8;
  result_value_ptr[97] = _tmp6;
  result_value_ptr[98] = -_tmp74 * _tmp75;
  result_value_ptr[99] = -_tmp75 * _tmp76;
  result_value_ptr[100] = -_tmp75;
  result_value_ptr[101] = _tmp78;
  result_value_ptr[102] = _tmp79;
  result_value_ptr[103] = _tmp62;
  result_value_ptr[104] = _tmp16 * _tmp35;
  result_value_ptr[105] = _tmp43;
  result_value_ptr[106] = _tmp43;
  result_value_ptr[107] = _tmp43;
  result_value_ptr[108] = _tmp16 * _tmp29;
  result_value_ptr[109] = 9 - _tmp18;
  result_value_ptr[110] = (Scalar(3) / Scalar(2)) * x1;
  result_value_ptr[111] = -3;
  result_value_ptr[112] = 6;
  result_value_ptr[113] = _tmp70;
  result_value_ptr[114] = _tmp80;
  result_value_ptr[115] = -2;
  result_value_ptr[116] = x1;
  result_value_ptr[117] = _tmp81;
  result_value_ptr[118] = _tmp7;
  result_value_ptr[119] = _tmp8;
  result_value_ptr[120] = -4;
  result_value_ptr[121] = _tmp82;
  result_value_ptr[122] = _tmp84;
  result_value_ptr[123] = _tmp16;
  result_value_ptr[124] = -1;
  result_value_ptr[125] = _tmp85;
  result_value_ptr[126] = -_tmp46 * _tmp86;
  result_value_ptr[127] = _tmp86;
  result_value_ptr[128] = -_tmp87 - 4;
  result_value_ptr[129] = _tmp88;
  result_value_ptr[130] = -_tmp9 - 3;
  result_value_ptr[131] = _tmp86;
  result_value_ptr[132] = _tmp86 * x1;
  result_value_ptr[133] = _tmp89;
  result_value_ptr[134] = -_tmp89;
  result_value_ptr[135] = _tmp89;
  result_value_ptr[136] = -2;
  result_value_ptr[137] = _tmp51;
  result_value_ptr[138] = -_tmp56;
  result_value_ptr[139] = _tmp91;
  result_value_ptr[140] = _tmp90 * _tmp92;
  result_value_ptr[141] = -_tmp52 * _tmp90;
  result_value_ptr[142] = -_tmp7 * _tmp75;
  result_value_ptr[143] = _tmp93;
  result_value_ptr[144] = _tmp0 * _tmp90;
  result_value_ptr[145] = _tmp63;
  result_value_ptr[146] = -_tmp0 * _tmp94;
  result_value_ptr[147] = _tmp95;
  result_value_ptr[148] = 4;
  result_value_ptr[149] = Scalar(-6.0);
  result_value_ptr[150] = _tmp96;
  result_value_ptr[151] = _tmp98;
  result_value_ptr[152] = 4;
  result_value_ptr[153] = _tmp30 * _tmp56;
  result_value_ptr[154] = _tmp98;
  result_value_ptr[155] = _tmp99;
  result_value_ptr[156] = -4;
  result_value_ptr[157] = _tmp4 + 12;
  result_value_ptr[158] = _tmp27;
  result_value_ptr[159] = _tmp25;
  result_value_ptr[160] = -_tmp29 * _tmp63;
  result_value_ptr[161] = _tmp95;
  result_value_ptr[162] = -4;
  result_value_ptr[163] = _tmp24;
  result_value_ptr[164] = _tmp100;
  result_value_ptr[165] = 4;
  result_value_ptr[166] = _tmp101;
  result_value_ptr[167] = _tmp103;
  result_value_ptr[168] = _tmp46 * x0;
  result_value_ptr[169] = _tmp6;
  result_value_ptr[170] = -4;
  result_value_ptr[171] = 2;
  result_value_ptr[172] = _tmp3;
  result_value_ptr[173] = _tmp2;
  result_value_ptr[174] = _tmp72;
  result_value_ptr[175] = _tmp105;
  result_value_ptr[176] = _tmp43;
  result_value_ptr[177] = -_tmp106 * x0;
  result_value_ptr[178] = Scalar(8.0);
  result_value_ptr[179] = _tmp108;
  result_value_ptr[180] = 8;
  result_value_ptr[181] = _tmp109;
  result_value_ptr[182] = -4;
  result_value_ptr[183] = 6;
  result_value_ptr[184] = _tmp18;
  result_value_ptr[185] = _tmp110;
  result_value_ptr[186] = _tmp20 + 3;
  result_value_ptr[187] = -Scalar(4.0) * _tmp77;
  result_value_ptr[188] = Scalar(8.0);
  result_value_ptr[189] = Scalar(-4.0);
  result_value_ptr[190] = -2;
  result_value_ptr[191] = -4;
  result_value_ptr[192] = _tmp7;
  result_value_ptr[193] = _tmp2;
  result_value_ptr[194] = -_tmp111 * x0;
  result_value_ptr[195] = _tmp102 * x0;
  result_value_ptr[196] = _tmp10;
  result_value_ptr[197] = _tmp10;
  result_value_ptr[198] = _tmp112;
  result_value_ptr[199] = _tmp113;
  result_value_ptr[200] = _tmp9;
  result_value_ptr[201] = -_tmp1 * _tmp113 + _tmp20;
  result_value_ptr[202] = _tmp113 * _tmp29 - 9 * x0;
  result_value_ptr[203] = _tmp113 * _tmp86 - _tmp9;
  result_value_ptr[204] = x0;
  result_value_ptr[205] = _tmp1;
  result_value_ptr[206] = -_tmp114 - _tmp68;
  result_value_ptr[207] = _tmp21 + _tmp72 + _tmp8 + 4;
  result_value_ptr[208] = _tmp24 + _tmp86 * x0;
  result_value_ptr[209] = _tmp115;
  result_value_ptr[210] = 4;
  result_value_ptr[211] = 2;
  result_value_ptr[212] = -6;
  result_value_ptr[213] = x1 - 4;
  result_value_ptr[214] = _tmp24;
  result_value_ptr[215] = _tmp116 + _tmp117;
  result_value_ptr[216] = _tmp38 * _tmp51;
  result_value_ptr[217] = -_tmp13 * _tmp90;
  result_value_ptr[218] = _tmp118;
  result_value_ptr[219] = _tmp1 * _tmp119;
  result_value_ptr[220] = _tmp119 * _tmp51 + _tmp16;
  result_value_ptr[221] = _tmp120;
  result_value_ptr[222] = 2;
  result_value_ptr[223] = -2;
  result_value_ptr[224] = 9;
  result_value_ptr[225] = -_tmp69;
  result_value_ptr[226] = -_tmp24 - _tmp9 - 8;
  result_value_ptr[227] = -6;
  result_value_ptr[228] = -_tmp121 + Scalar(-8.0);
  result_value_ptr[229] = _tmp102;
  result_value_ptr[230] = _tmp51 * _tmp83;
  result_value_ptr[231] = _tmp48;
  result_value_ptr[232] = -_tmp47 - _tmp72;
  result_value_ptr[233] = _tmp51;
  result_value_ptr[234] = _tmp7;
  result_value_ptr[235] = _tmp113 * x0;
  result_value_ptr[236] = _tmp93;
  result_value_ptr[237] = _tmp30;
  result_value_ptr[238] = -_tmp0 - _tmp7 - _tmp92;
  result_value_ptr[239] = _tmp14 * _tmp92;
  result_value_ptr[240] = _tmp63;
  result_value_ptr[241] = _tmp122;
  result_value_ptr[242] = _tmp18;
  result_value_ptr[243] = -_tmp15;
  result_value_ptr[244] = -_tmp69 * x1;
  result_value_ptr[245] = -_tmp55;
  result_value_ptr[246] = _tmp123;
  result_value_ptr[247] = _tmp16;
  result_value_ptr[248] = -1;
  result_value_ptr[249] = _tmp83;
  result_value_ptr[250] = _tmp6;
  result_value_ptr[251] = _tmp1 + 3;
  result_value_ptr[252] = Scalar(-6.0);
  result_value_ptr[253] = _tmp25;
  result_value_ptr[254] = _tmp18;
  result_value_ptr[255] = _tmp84;
  result_value_ptr[256] = _tmp14 * x1;
  result_value_ptr[257] = -_tmp15 * _tmp30;
  result_value_ptr[258] = -_tmp61 * _tmp7;
  result_value_ptr[259] = _tmp1;
  result_value_ptr[260] = _tmp124;
  result_value_ptr[261] = _tmp51 * _tmp61;
  result_value_ptr[262] = -_tmp11 - _tmp125 - _tmp126;
  result_value_ptr[263] = _tmp127 + _tmp61 * _tmp69;
  result_value_ptr[264] = _tmp128;
  result_value_ptr[265] = _tmp68;
  result_value_ptr[266] = (Scalar(1) / Scalar(2)) * _tmp35;
  result_value_ptr[267] = _tmp129;
  result_value_ptr[268] = _tmp29;
  result_value_ptr[269] = _tmp1;
  result_value_ptr[270] = -_tmp51 * _tmp90;
  result_value_ptr[271] = _tmp126 + _tmp130;
  result_value_ptr[272] = _tmp132 - _tmp133 - 2;
  result_value_ptr[273] = x1;
  result_value_ptr[274] = -_tmp113;
  result_value_ptr[275] = _tmp1;
  result_value_ptr[276] = _tmp124;
  result_value_ptr[277] = Scalar(-4.0);
  result_value_ptr[278] = 8;
  result_value_ptr[279] = _tmp52;
  result_value_ptr[280] = _tmp10 - 8;
  result_value_ptr[281] = -_tmp134 + _tmp69 * x0;
  result_value_ptr[282] = _tmp121 + 4;
  result_value_ptr[283] = _tmp65;
  result_value_ptr[284] = _tmp46;
  result_value_ptr[285] = _tmp135;
  result_value_ptr[286] = _tmp13 * _tmp46 + _tmp24 + 2;
  result_value_ptr[287] = _tmp2;
  result_value_ptr[288] = _tmp136;
  result_value_ptr[289] = _tmp137;
  result_value_ptr[290] = _tmp4;
  result_value_ptr[291] = _tmp87;
  result_value_ptr[292] = -_tmp138 - _tmp87;
  result_value_ptr[293] = 1;
  result_value_ptr[294] = _tmp68;
  result_value_ptr[295] = 2;
  result_value_ptr[296] = _tmp140;
  result_value_ptr[297] = _tmp4;
  result_value_ptr[298] = Scalar(4.0) * x0;
  result_value_ptr[299] = _tmp141 * x1 - _tmp46 * _tmp55 + _tmp8;
  result_value_ptr[300] = -_tmp140;
  result_value_ptr[301] = _tmp142;
  result_value_ptr[302] = -_tmp38 * _tmp55;
  result_value_ptr[303] = -_tmp13 * _tmp69;
  result_value_ptr[304] = _tmp2;
  result_value_ptr[305] = -4;
  result_value_ptr[306] = _tmp100 - _tmp13 * _tmp41 + _tmp143 - 5;
  result_value_ptr[307] = _tmp1 * _tmp13;
  result_value_ptr[308] = -_tmp144;
  result_value_ptr[309] = 3;
  result_value_ptr[310] = -_tmp29 * _tmp78;
  result_value_ptr[311] = _tmp145 + 4;
  result_value_ptr[312] = -_tmp1 * _tmp146;
  result_value_ptr[313] = -_tmp146 * x1 - _tmp147;
  result_value_ptr[314] = std::pow(_tmp29, Scalar(2)) * _tmp77;
  result_value_ptr[315] = _tmp37;
  result_value_ptr[316] = _tmp148;
  result_value_ptr[317] = _tmp150;
  result_value_ptr[318] = _tmp73;
  result_value_ptr[319] = _tmp149 * x0;
  result_value_ptr[320] = -_tmp150 + _tmp151;
  result_value_ptr[321] = _tmp29 * _tmp30;
  result_value_ptr[322] = -_tmp152 * _tmp32;
  result_value_ptr[323] = _tmp29;
  result_value_ptr[324] = _tmp69 * _tmp92;
  result_value_ptr[325] = 2;
  result_value_ptr[326] = _tmp41 * _tmp92;
  result_value_ptr[327] = -_tmp153 - _tmp154;
  result_value_ptr[328] = _tmp120;
  result_value_ptr[329] = _tmp27;
  result_value_ptr[330] = _tmp62;
  result_value_ptr[331] = _tmp16;
  result_value_ptr[332] = _tmp155;
  result_value_ptr[333] = _tmp138;
  result_value_ptr[334] = _tmp7;
  result_value_ptr[335] = _tmp68;
  result_value_ptr[336] = _tmp124;
  result_value_ptr[337] = Scalar(1.5);
  result_value_ptr[338] = -_tmp46 * x1;
  result_value_ptr[339] = _tmp114;
  result_value_ptr[340] = Scalar(1.5) * _tmp35;
  result_value_ptr[341] = _tmp1 + _tmp156 + Scalar(1.5) * x0 + Scalar(1.5);
  result_value_ptr[342] = _tmp157 - _tmp33 * _tmp7 + _tmp60;
  result_value_ptr[343] = Scalar(3.5) * x0 + Scalar(3.0);
  result_value_ptr[344] = _tmp155;
  result_value_ptr[345] = _tmp158;
  result_value_ptr[346] = _tmp21;
  result_value_ptr[347] = _tmp159;
  result_value_ptr[348] = -_tmp130;
  result_value_ptr[349] = -3 * _tmp160;
  result_value_ptr[350] = -_tmp125 - _tmp18 * _tmp38;
  result_value_ptr[351] = -_tmp120 * _tmp29 - _tmp18 * _tmp41 + _tmp32 * _tmp59;
  result_value_ptr[352] = -_tmp16 * _tmp18 + _tmp34 + 2;
  result_value_ptr[353] = _tmp29;
  result_value_ptr[354] = _tmp8;
  result_value_ptr[355] = _tmp68;
  result_value_ptr[356] = 6;
  result_value_ptr[357] = _tmp1;
  result_value_ptr[358] = _tmp161;
  result_value_ptr[359] = _tmp155 + _tmp92;
  result_value_ptr[360] = -_tmp13 * _tmp80 - _tmp41 * x1;
  result_value_ptr[361] = _tmp132 + _tmp18 * x0 + 2;
  result_value_ptr[362] = -_tmp19;
  result_value_ptr[363] = _tmp88;
  result_value_ptr[364] = _tmp80;
  result_value_ptr[365] = _tmp120 * x1;
  result_value_ptr[366] = _tmp122;
  result_value_ptr[367] = _tmp162;
  result_value_ptr[368] = _tmp114 + _tmp5;
  result_value_ptr[369] = _tmp65;
  result_value_ptr[370] = _tmp118;
  result_value_ptr[371] = _tmp1;
  result_value_ptr[372] = _tmp0;
  result_value_ptr[373] = _tmp102;
  result_value_ptr[374] = -4;
  result_value_ptr[375] = _tmp18 + _tmp7;
  result_value_ptr[376] = _tmp8;
  result_value_ptr[377] = _tmp97;
  result_value_ptr[378] = 2;
  result_value_ptr[379] = -_tmp29 * _tmp46;
  result_value_ptr[380] = _tmp108;
  result_value_ptr[381] = -_tmp87 - 8;
  result_value_ptr[382] = std::pow(_tmp46, Scalar(2)) + 4;
  result_value_ptr[383] = _tmp46;
  result_value_ptr[384] = _tmp0 * _tmp163;
  result_value_ptr[385] = -2;
  result_value_ptr[386] = _tmp105;
  result_value_ptr[387] = _tmp164 + _tmp4;
  result_value_ptr[388] = _tmp41;
  result_value_ptr[389] = -3;
  result_value_ptr[390] = -_tmp35 * _tmp77;
  result_value_ptr[391] = _tmp8;
  result_value_ptr[392] = -Scalar(1) / Scalar(2) * _tmp29 * _tmp83;
  result_value_ptr[393] = _tmp15 + 16;
  result_value_ptr[394] = 4;
  result_value_ptr[395] = _tmp97;
  result_value_ptr[396] = _tmp34;
  result_value_ptr[397] = _tmp135;
  result_value_ptr[398] = (Scalar(1) / Scalar(2)) * _tmp71;
  result_value_ptr[399] = _tmp46;
  result_value_ptr[400] = -_tmp165;
  result_value_ptr[401] = _tmp13 * _tmp15;
  result_value_ptr[402] = _tmp166;
  result_value_ptr[403] = -_tmp15 * _tmp61;
  result_value_ptr[404] = _tmp0;
  result_value_ptr[405] = _tmp68;
  result_value_ptr[406] = _tmp34;
  result_value_ptr[407] = 4;
  result_value_ptr[408] = Scalar(1.0);
  result_value_ptr[409] = _tmp7;
  result_value_ptr[410] = _tmp0 * _tmp56;
  result_value_ptr[411] = _tmp1;
  result_value_ptr[412] = -16;
  result_value_ptr[413] = _tmp167;
  result_value_ptr[414] = _tmp0 * _tmp13 + _tmp0 - 12;
  result_value_ptr[415] = Scalar(10.0) * x1 + 4;
  result_value_ptr[416] = -_tmp168 + x0;
  result_value_ptr[417] = 4;
  result_value_ptr[418] = _tmp136;
  result_value_ptr[419] = _tmp110;
  result_value_ptr[420] = _tmp169;
  result_value_ptr[421] = -_tmp54 - 24;
  result_value_ptr[422] = _tmp17;
  result_value_ptr[423] = -_tmp1 - _tmp143 - 12;
  result_value_ptr[424] = -_tmp52 - _tmp56 * _tmp64 + Scalar(9.0);
  result_value_ptr[425] = (Scalar(1) / Scalar(2)) * _tmp136 + _tmp143 + _tmp21 + 3;
  result_value_ptr[426] = _tmp30;
  result_value_ptr[427] = _tmp170;
  result_value_ptr[428] = -_tmp149;
  result_value_ptr[429] = _tmp171;
  result_value_ptr[430] = -_tmp172;
  result_value_ptr[431] = _tmp58 + _tmp8;
  result_value_ptr[432] = -_tmp173 - _tmp67 + Scalar(-6.0);
  result_value_ptr[433] = _tmp143 + (Scalar(1) / Scalar(2)) * _tmp30 - _tmp56 * _tmp61 + 9;
  result_value_ptr[434] = _tmp7;
  result_value_ptr[435] = _tmp153 + _tmp40 + _tmp8;
  result_value_ptr[436] = _tmp114;
  result_value_ptr[437] = -4 * _tmp32 - 4;
  result_value_ptr[438] = _tmp67;
  result_value_ptr[439] = _tmp1;
  result_value_ptr[440] = _tmp155;
  result_value_ptr[441] = _tmp122 + _tmp174;
  result_value_ptr[442] = _tmp97;
  result_value_ptr[443] = 4;
  result_value_ptr[444] = _tmp120;
  result_value_ptr[445] = _tmp175;
  result_value_ptr[446] = _tmp68;
  result_value_ptr[447] = _tmp98;
  result_value_ptr[448] = _tmp122 + _tmp6 + 10;
  result_value_ptr[449] = _tmp54;
  result_value_ptr[450] = _tmp149;
  result_value_ptr[451] = _tmp167;
  result_value_ptr[452] = -1;
  result_value_ptr[453] = _tmp34;
  result_value_ptr[454] = _tmp176 + _tmp8;
  result_value_ptr[455] = -_tmp64 * _tmp7;
  result_value_ptr[456] = _tmp104 * _tmp13;
  result_value_ptr[457] = _tmp177;
  result_value_ptr[458] = _tmp56 * _tmp90;
  result_value_ptr[459] = x0;
  result_value_ptr[460] = _tmp20;
  result_value_ptr[461] = -x0 - 7;
  result_value_ptr[462] = _tmp178;
  result_value_ptr[463] = -8;
  result_value_ptr[464] = _tmp54;
  result_value_ptr[465] = _tmp134;
  result_value_ptr[466] = _tmp6;
  result_value_ptr[467] = _tmp0;
  result_value_ptr[468] = 18;
  result_value_ptr[469] = -8;
  result_value_ptr[470] = -2;
  result_value_ptr[471] = Scalar(-2.0);
  result_value_ptr[472] = _tmp179;
  result_value_ptr[473] = _tmp102 + _tmp8;
  result_value_ptr[474] = -2;
  result_value_ptr[475] = -_tmp41 - 6;
  result_value_ptr[476] = _tmp26;
  result_value_ptr[477] = -12;
  result_value_ptr[478] = _tmp24;
  result_value_ptr[479] = _tmp56;
  result_value_ptr[480] = _tmp30;
  result_value_ptr[481] = _tmp6;
  result_value_ptr[482] = -1;
  result_value_ptr[483] = _tmp96;
  result_value_ptr[484] = -_tmp180;
  result_value_ptr[485] = -_tmp66 * _tmp7;
  result_value_ptr[486] = -4;
  result_value_ptr[487] = _tmp46;
  result_value_ptr[488] = _tmp92;
  result_value_ptr[489] = -_tmp0 + _tmp69 * _tmp7 - 7;
  result_value_ptr[490] = -_tmp181 - _tmp46;
  result_value_ptr[491] = -_tmp11 - _tmp162 + Scalar(-2.0);
  result_value_ptr[492] = _tmp183 * _tmp7;
  result_value_ptr[493] = _tmp164 + _tmp184 + 10;
  result_value_ptr[494] = _tmp177;
  result_value_ptr[495] = -_tmp183;
  result_value_ptr[496] = _tmp184;
  result_value_ptr[497] = -_tmp185 - 8 * _tmp32 - x0;
  result_value_ptr[498] = -_tmp158 - _tmp34 - _tmp80 - 30;
  result_value_ptr[499] = _tmp10 - _tmp164 - Scalar(2.0) * _tmp32;
  result_value_ptr[500] = _tmp30;
  result_value_ptr[501] = -_tmp66 * _tmp90;
  result_value_ptr[502] = _tmp79;
  result_value_ptr[503] = _tmp186;
  result_value_ptr[504] = _tmp133;
  result_value_ptr[505] = _tmp9 - 6;
  result_value_ptr[506] = -_tmp187 - _tmp62;
  result_value_ptr[507] = _tmp175;
  result_value_ptr[508] = x0;
  result_value_ptr[509] = _tmp24 + _tmp39 + _tmp80 + 6;
  result_value_ptr[510] = _tmp188;
  result_value_ptr[511] = _tmp177;
  result_value_ptr[512] = -_tmp81;
  result_value_ptr[513] = Scalar(6.0);
  result_value_ptr[514] = Scalar(7.0) * x0 + Scalar(12.0);
  result_value_ptr[515] = _tmp162;
  result_value_ptr[516] = -6;
  result_value_ptr[517] = 9;
  result_value_ptr[518] = -_tmp0 * _tmp29;
  result_value_ptr[519] = _tmp100;
  result_value_ptr[520] = x1;
  result_value_ptr[521] = _tmp179 + _tmp62;
  result_value_ptr[522] = -16 * x1;
  result_value_ptr[523] = _tmp79;
  result_value_ptr[524] = -_tmp87 - 16;
  result_value_ptr[525] = -_tmp74 * x0;
  result_value_ptr[526] = _tmp162;
  result_value_ptr[527] = _tmp115;
  result_value_ptr[528] = -_tmp76 * x0 - _tmp8;
  result_value_ptr[529] = _tmp34;
  result_value_ptr[530] = -2;
  result_value_ptr[531] = -10;
  result_value_ptr[532] = _tmp189;
  result_value_ptr[533] = 4;
  result_value_ptr[534] = 4;
  result_value_ptr[535] = -_tmp142 - x0;
  result_value_ptr[536] = 4;
  result_value_ptr[537] = 1;
  result_value_ptr[538] = _tmp190;
  result_value_ptr[539] = -Scalar(1.0) * _tmp35;
  result_value_ptr[540] = _tmp96;
  result_value_ptr[541] = _tmp191 - 4;
  result_value_ptr[542] = _tmp10;
  result_value_ptr[543] = _tmp10;
  result_value_ptr[544] = Scalar(1.0) - _tmp11;
  result_value_ptr[545] = _tmp74 * x1;
  result_value_ptr[546] = std::pow(_tmp192, Scalar(2));
  result_value_ptr[547] = _tmp76 * x1;
  result_value_ptr[548] = -_tmp15 * _tmp192 - _tmp68;
  result_value_ptr[549] = _tmp192;
  result_value_ptr[550] = _tmp194;
  result_value_ptr[551] = -_tmp1 * _tmp192;
  result_value_ptr[552] = _tmp189;
  result_value_ptr[553] = _tmp80;
  result_value_ptr[554] = -2;
  result_value_ptr[555] = -4;
  result_value_ptr[556] = _tmp45;
  result_value_ptr[557] = _tmp35;
  result_value_ptr[558] = _tmp193;
  result_value_ptr[559] = x0;
  result_value_ptr[560] = _tmp34;
  result_value_ptr[561] = _tmp68;
  result_value_ptr[562] = _tmp178;
  result_value_ptr[563] = -x0 - 4;
  result_value_ptr[564] = -_tmp18 - 1;
  result_value_ptr[565] = _tmp6;
  result_value_ptr[566] = _tmp161;
  result_value_ptr[567] = -_tmp192 * _tmp35;
  result_value_ptr[568] = _tmp104;
  result_value_ptr[569] = (Scalar(1) / Scalar(2)) * _tmp160;
  result_value_ptr[570] = _tmp104 + _tmp195;
  result_value_ptr[571] = _tmp122 + _tmp165 + _tmp68;
  result_value_ptr[572] = 2 * _tmp160 + _tmp196;
  result_value_ptr[573] = -_tmp164 - 5;
  result_value_ptr[574] = 2 * std::pow(x1, Scalar(4));
  result_value_ptr[575] = _tmp194;
  result_value_ptr[576] = _tmp30;
  result_value_ptr[577] = -_tmp197;
  result_value_ptr[578] = x1;
  result_value_ptr[579] = -_tmp197 - 2;
  result_value_ptr[580] = 4 - _tmp197;
  result_value_ptr[581] = _tmp0 + _tmp122 * _tmp29;
  result_value_ptr[582] = _tmp34;
  result_value_ptr[583] = _tmp107;
  result_value_ptr[584] = _tmp198;
  result_value_ptr[585] = -_tmp49 - 4 * _tmp77 + 2;
  result_value_ptr[586] = _tmp198;
  result_value_ptr[587] = _tmp8;
  result_value_ptr[588] = _tmp98;
  result_value_ptr[589] = -_tmp22;
  result_value_ptr[590] = _tmp25;
  result_value_ptr[591] = -_tmp152 - _tmp22 + _tmp57;
  result_value_ptr[592] = -_tmp170;
  result_value_ptr[593] = _tmp102 * _tmp29;
  result_value_ptr[594] = _tmp29;
  result_value_ptr[595] = _tmp8;
  result_value_ptr[596] = -2;
  result_value_ptr[597] = 2;
  result_value_ptr[598] = -_tmp104 - _tmp4 + 8;
  result_value_ptr[599] = _tmp104;
  result_value_ptr[600] = _tmp114;
  result_value_ptr[601] = -_tmp129;
  result_value_ptr[602] = _tmp171;
  result_value_ptr[603] = 1;
  result_value_ptr[604] = _tmp4 * _tmp90 + 21;
  result_value_ptr[605] = _tmp24;
  result_value_ptr[606] = _tmp90;
  result_value_ptr[607] = -_tmp38 * _tmp90;
  result_value_ptr[608] = _tmp16;
  result_value_ptr[609] = -9;
  result_value_ptr[610] = _tmp85;
  result_value_ptr[611] = _tmp0 + _tmp87;
  result_value_ptr[612] = _tmp4;
  result_value_ptr[613] = 2;
  result_value_ptr[614] = -_tmp18 - 6;
  result_value_ptr[615] = x1;
  result_value_ptr[616] = -_tmp192;
  result_value_ptr[617] = -12;
  result_value_ptr[618] = -3;
  result_value_ptr[619] = -9;
  result_value_ptr[620] = _tmp4;
  result_value_ptr[621] = -8;
  result_value_ptr[622] = x1;
  result_value_ptr[623] = _tmp0 * _tmp16;
  result_value_ptr[624] = 8;
  result_value_ptr[625] = -_tmp142;
  result_value_ptr[626] = _tmp100;
  result_value_ptr[627] = -_tmp168 - _tmp174;
  result_value_ptr[628] = _tmp180;
  result_value_ptr[629] = _tmp13;
  result_value_ptr[630] = 4;
  result_value_ptr[631] = _tmp8;
  result_value_ptr[632] = _tmp130;
  result_value_ptr[633] = _tmp152 + _tmp24 + _tmp87;
  result_value_ptr[634] = -_tmp152 + _tmp7;
  result_value_ptr[635] = _tmp152 + _tmp9;
  result_value_ptr[636] = _tmp96;
  result_value_ptr[637] = _tmp47;
  result_value_ptr[638] = Scalar(0.5);
  result_value_ptr[639] = _tmp87;
  result_value_ptr[640] = _tmp24;
  result_value_ptr[641] = _tmp12;
  result_value_ptr[642] = Scalar(8.5) * x1 + Scalar(-0.5);
  result_value_ptr[643] = _tmp166 + Scalar(2.5);
  result_value_ptr[644] = Scalar(6.5) * x1 + Scalar(-0.5);
  result_value_ptr[645] = -_tmp120;
  result_value_ptr[646] = _tmp103;
  result_value_ptr[647] = 1;
  result_value_ptr[648] = 2;
  result_value_ptr[649] = 2;
  result_value_ptr[650] = x1;
  result_value_ptr[651] = x1 - 9;
  result_value_ptr[652] = _tmp169;
  result_value_ptr[653] = -_tmp7 - 7;
  result_value_ptr[654] = _tmp34;
  result_value_ptr[655] = _tmp100;
  result_value_ptr[656] = _tmp122 * _tmp13;
  result_value_ptr[657] = -_tmp1 - _tmp102 * _tmp122 - _tmp50;
  result_value_ptr[658] = _tmp153;
  result_value_ptr[659] = -_tmp1 * (_tmp30 + 1);
  result_value_ptr[660] = _tmp177;
  result_value_ptr[661] = _tmp115;
  result_value_ptr[662] = _tmp101;
  result_value_ptr[663] = _tmp70 - 2;
  result_value_ptr[664] = _tmp155;
  result_value_ptr[665] = 8 - _tmp54;
  result_value_ptr[666] = -_tmp2 * x1;
  result_value_ptr[667] = _tmp10;
  result_value_ptr[668] = _tmp8;
  result_value_ptr[669] = _tmp104;
  result_value_ptr[670] = -_tmp124 - _tmp141 - _tmp186;
  result_value_ptr[671] = _tmp53;
  result_value_ptr[672] = _tmp128;
  result_value_ptr[673] = -_tmp127;
  result_value_ptr[674] = _tmp171;
  result_value_ptr[675] = -2;
  result_value_ptr[676] = _tmp144 + _tmp54;
  result_value_ptr[677] = _tmp181;
  result_value_ptr[678] = -8;
  result_value_ptr[679] = -8;
  result_value_ptr[680] = 6 - 6 * _tmp32;
  result_value_ptr[681] = 4;
  result_value_ptr[682] = -_tmp199;
  result_value_ptr[683] = -_tmp29 * _tmp56 - _tmp7 + 3;
  result_value_ptr[684] = -_tmp110;
  result_value_ptr[685] = -_tmp25 * _tmp29;
  result_value_ptr[686] = _tmp3;
  result_value_ptr[687] = -_tmp60;
  result_value_ptr[688] = -_tmp190;
  result_value_ptr[689] = -_tmp93;
  result_value_ptr[690] = _tmp196 + _tmp20 * _tmp51;
  result_value_ptr[691] = _tmp29 * _tmp94;
  result_value_ptr[692] = _tmp159;
  result_value_ptr[693] = -2;
  result_value_ptr[694] = _tmp147;
  result_value_ptr[695] = Scalar(3.0) - _tmp9;
  result_value_ptr[696] = -_tmp90;
  result_value_ptr[697] = _tmp56;
  result_value_ptr[698] = -2;
  result_value_ptr[699] = -_tmp182 - 2;
  result_value_ptr[700] = _tmp124;
  result_value_ptr[701] = 4;
  result_value_ptr[702] = -1;
  result_value_ptr[703] = -_tmp62 - _tmp68;
  result_value_ptr[704] = _tmp189 * _tmp90;
  result_value_ptr[705] = _tmp200;
  result_value_ptr[706] = -_tmp96 * x0;
  result_value_ptr[707] = _tmp145;
  result_value_ptr[708] = _tmp173 + Scalar(3.0) * _tmp35;
  result_value_ptr[709] = -_tmp189 * _tmp94 - _tmp201 * _tmp90 + _tmp8 + 2;
  result_value_ptr[710] = _tmp189 * _tmp38 + _tmp201 * _tmp56;
  result_value_ptr[711] = _tmp200;
  result_value_ptr[712] = -_tmp16 * _tmp96;
  result_value_ptr[713] = _tmp23;
  result_value_ptr[714] = _tmp32;
  result_value_ptr[715] = -_tmp16 * _tmp51;
  result_value_ptr[716] = _tmp0;
  result_value_ptr[717] = -Scalar(1.5) * _tmp32;
  result_value_ptr[718] = _tmp202 * _tmp90 - _tmp4 - _tmp54;
  result_value_ptr[719] = _tmp199 - _tmp202 * _tmp56 + 6;
  result_value_ptr[720] = _tmp32;
  result_value_ptr[721] = _tmp55;
  result_value_ptr[722] = _tmp187;
  result_value_ptr[723] = -2;
  result_value_ptr[724] = _tmp203;
  result_value_ptr[725] = _tmp195;
  result_value_ptr[726] = Scalar(3.0);
  result_value_ptr[727] = _tmp117 + _tmp94 * x1;
  result_value_ptr[728] = _tmp155 + _tmp56;
  result_value_ptr[729] = -_tmp1 * _tmp25 - 2;
  result_value_ptr[730] = _tmp100;
  result_value_ptr[731] = -3;
  result_value_ptr[732] = -_tmp1 * _tmp30;
  result_value_ptr[733] = _tmp154 - 3 * _tmp30 - x1 + Scalar(-2.0);
  result_value_ptr[734] = _tmp176;
  result_value_ptr[735] = x1 + Scalar(-1.0);
  result_value_ptr[736] = -4;
  result_value_ptr[737] = Scalar(2.0);
  result_value_ptr[738] = Scalar(-4.0);
  result_value_ptr[739] = Scalar(2.5) - _tmp11;
  result_value_ptr[740] = _tmp34;
  result_value_ptr[741] = -_tmp12 + Scalar(-0.5);
  result_value_ptr[742] = Scalar(0.5);
  result_value_ptr[743] = _tmp123;
  result_value_ptr[744] = _tmp13 * _tmp76 - 4;
  result_value_ptr[745] = _tmp13 * _tmp163;
  result_value_ptr[746] = _tmp24;
  result_value_ptr[747] = _tmp8;
  result_value_ptr[748] = _tmp100;
  result_value_ptr[749] = _tmp42;
  result_value_ptr[750] = _tmp8;
  result_value_ptr[751] = _tmp1 + _tmp2 * _tmp7 + _tmp8;
  result_value_ptr[752] = _tmp204;
  result_value_ptr[753] = _tmp206;
  result_value_ptr[754] = _tmp206;
  result_value_ptr[755] = _tmp57;
  result_value_ptr[756] = _tmp25 * _tmp51;
  result_value_ptr[757] = _tmp1 - 5;
  result_value_ptr[758] = -1;
  result_value_ptr[759] = _tmp24;
  result_value_ptr[760] = -2;
  result_value_ptr[761] = -Scalar(3.0) * _tmp151;
  result_value_ptr[762] = _tmp7 + 6;
  result_value_ptr[763] = _tmp1 + _tmp191 + Scalar(3.0);
  result_value_ptr[764] = _tmp100;
  result_value_ptr[765] = _tmp1;
  result_value_ptr[766] = _tmp204 + 2;
  result_value_ptr[767] = x1;
  result_value_ptr[768] = _tmp1;
  result_value_ptr[769] = -2;
  result_value_ptr[770] = -4;
  result_value_ptr[771] = 2;
  result_value_ptr[772] = 2;
  result_value_ptr[773] = _tmp34;
  result_value_ptr[774] = _tmp29 * _tmp71;
  result_value_ptr[775] = -4;
  result_value_ptr[776] = _tmp188;
  result_value_ptr[777] = _tmp7;
  result_value_ptr[778] = _tmp104 + _tmp24;
  result_value_ptr[779] = _tmp114;
  result_value_ptr[780] = _tmp8;
  result_value_ptr[781] = _tmp8;
  result_value_ptr[782] = _tmp11 * _tmp29;
  result_value_ptr[783] = -_tmp207 * _tmp7;
  result_value_ptr[784] = -_tmp10 + Scalar(-1.0);
  result_value_ptr[785] = -2;
  result_value_ptr[786] = _tmp68;
  result_value_ptr[787] = _tmp208 + _tmp24;
  result_value_ptr[788] = 2;
  result_value_ptr[789] = _tmp208;
  result_value_ptr[790] = _tmp196;
  result_value_ptr[791] = _tmp90;
  result_value_ptr[792] = _tmp38;
  result_value_ptr[793] = -4;
  result_value_ptr[794] = _tmp24;
  result_value_ptr[795] = _tmp100;
  result_value_ptr[796] = _tmp76;
  result_value_ptr[797] = _tmp1 * _tmp90;
  result_value_ptr[798] = _tmp90;
  result_value_ptr[799] = _tmp68;
  result_value_ptr[800] = _tmp117 + _tmp145 + _tmp148;
  result_value_ptr[801] = _tmp68;
  result_value_ptr[802] = _tmp65 * _tmp77;
  result_value_ptr[803] = -_tmp82;
  result_value_ptr[804] = 16;
  result_value_ptr[805] = -8;
  result_value_ptr[806] = _tmp92;
  result_value_ptr[807] = 2;
  result_value_ptr[808] = x1;
  result_value_ptr[809] = _tmp20;
  result_value_ptr[810] = _tmp34;
  result_value_ptr[811] = _tmp24;
  result_value_ptr[812] = _tmp6;
  result_value_ptr[813] = _tmp7;
  result_value_ptr[814] = _tmp41;
  result_value_ptr[815] = _tmp104;
  result_value_ptr[816] = _tmp83;
  result_value_ptr[817] = -1;
  result_value_ptr[818] = -1;
  result_value_ptr[819] = -_tmp1 + _tmp78;
  result_value_ptr[820] = _tmp106 * _tmp77;
  result_value_ptr[821] = _tmp17;
  result_value_ptr[822] = Scalar(2.0);
  result_value_ptr[823] = -6;
  result_value_ptr[824] = _tmp123;
  result_value_ptr[825] = 2;
  result_value_ptr[826] = _tmp20;
  result_value_ptr[827] = -1;
  result_value_ptr[828] = _tmp8;
  result_value_ptr[829] = _tmp100;
  result_value_ptr[830] = _tmp7;
  result_value_ptr[831] = _tmp153 + _tmp30;
  result_value_ptr[832] = _tmp203;
  result_value_ptr[833] = -_tmp116;
  result_value_ptr[834] = _tmp35;
  result_value_ptr[835] = -8;
  result_value_ptr[836] = 16 * x0;
  result_value_ptr[837] = _tmp131;
  result_value_ptr[838] = _tmp106 * x1 - _tmp87;
  result_value_ptr[839] = Scalar(2.0);
  result_value_ptr[840] = _tmp6;
  result_value_ptr[841] = _tmp3;
  result_value_ptr[842] = -_tmp111;
  result_value_ptr[843] = _tmp118;
  result_value_ptr[844] = _tmp162;
  result_value_ptr[845] = -_tmp1 - _tmp172 + 10;
  result_value_ptr[846] = _tmp20 + _tmp205 - _tmp38 * _tmp7;
  result_value_ptr[847] = _tmp2 * _tmp29;
  result_value_ptr[848] = Scalar(-2.0);
  result_value_ptr[849] = _tmp92;
  result_value_ptr[850] = _tmp111 * _tmp56;
  result_value_ptr[851] = _tmp38;
  result_value_ptr[852] = -_tmp102 * _tmp56 + 4 * _tmp30 - 2;
  result_value_ptr[853] = -_tmp156 - _tmp20;
  result_value_ptr[854] = -_tmp11 - _tmp29 * _tmp92 + Scalar(3.0);
  result_value_ptr[855] = -Scalar(2.0) * x0 + Scalar(-2.0);
  result_value_ptr[856] = 2;
  result_value_ptr[857] = -3;
  result_value_ptr[858] = _tmp169;
  result_value_ptr[859] = _tmp10 * x1;
  result_value_ptr[860] = std::pow(_tmp38, Scalar(2));
  result_value_ptr[861] = x1;
  result_value_ptr[862] = -_tmp120 - _tmp185;
  result_value_ptr[863] = -_tmp20 * _tmp38 + _tmp4 + 1;
  result_value_ptr[864] = _tmp112 * x1 + _tmp18 + x0;
  result_value_ptr[865] = _tmp91;
  result_value_ptr[866] = 2 - _tmp114;
  result_value_ptr[867] = _tmp112 * _tmp90;
  result_value_ptr[868] = -_tmp65 * x0 + Scalar(2.0);

  return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
