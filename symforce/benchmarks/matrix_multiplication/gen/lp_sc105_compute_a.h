// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <Eigen/Sparse>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     x0: Scalar
 *     x1: Scalar
 *
 * Outputs:
 *     result: Matrix105_163
 *
 */
template <typename Scalar>
Eigen::SparseMatrix<Scalar> LpSc105ComputeA(const Scalar x0, const Scalar x1) {
  // Total ops: 156

  // Input arrays

  // Intermediate terms (42)
  const Scalar _tmp0 = Scalar(1.0) / (x0);
  const Scalar _tmp1 = (Scalar(1) / Scalar(2)) * x1;
  const Scalar _tmp2 = 2 * x0;
  const Scalar _tmp3 = -_tmp2;
  const Scalar _tmp4 = x0 - 1;
  const Scalar _tmp5 = -x1;
  const Scalar _tmp6 = _tmp5 + x0;
  const Scalar _tmp7 = -_tmp6;
  const Scalar _tmp8 = x0 + 2;
  const Scalar _tmp9 = x0 + 1;
  const Scalar _tmp10 = -_tmp9;
  const Scalar _tmp11 = 2 * x1;
  const Scalar _tmp12 = -_tmp11;
  const Scalar _tmp13 = x1 - 1;
  const Scalar _tmp14 = 4 * x1;
  const Scalar _tmp15 = x1 - 2;
  const Scalar _tmp16 = -_tmp15;
  const Scalar _tmp17 = -x0;
  const Scalar _tmp18 = x1 + 2;
  const Scalar _tmp19 = -_tmp0;
  const Scalar _tmp20 = std::pow(x1, Scalar(2));
  const Scalar _tmp21 = -_tmp20;
  const Scalar _tmp22 = Scalar(1.0) / (x1);
  const Scalar _tmp23 = 2 * _tmp22;
  const Scalar _tmp24 = -_tmp23;
  const Scalar _tmp25 = 4 * x0;
  const Scalar _tmp26 = -_tmp8;
  const Scalar _tmp27 = -_tmp18;
  const Scalar _tmp28 = -_tmp4;
  const Scalar _tmp29 = std::pow(x0, Scalar(2));
  const Scalar _tmp30 = -_tmp29;
  const Scalar _tmp31 = x1 + 1;
  const Scalar _tmp32 = -_tmp13;
  const Scalar _tmp33 = x0 - 2;
  const Scalar _tmp34 = -_tmp33;
  const Scalar _tmp35 = -_tmp11 - _tmp2;
  const Scalar _tmp36 = -x0 * x1;
  const Scalar _tmp37 = _tmp4 + x1;
  const Scalar _tmp38 = x0 + 3;
  const Scalar _tmp39 = -_tmp31;
  const Scalar _tmp40 = _tmp11 + 4;
  const Scalar _tmp41 = 3 * x0;

  // Output terms (1)
  static constexpr int kRows_result = 105;
  static constexpr int kCols_result = 163;
  static constexpr int kNumNonZero_result = 318;
  static constexpr int kColPtrs_result[] = {
      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,
      19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,
      38,  39,  40,  40,  41,  42,  43,  44,  45,  46,  46,  47,  47,  48,  49,  50,  51,  52,  53,
      54,  55,  56,  57,  60,  63,  66,  68,  71,  74,  76,  79,  81,  83,  85,  88,  91,  93,  95,
      97,  100, 103, 106, 108, 110, 112, 115, 118, 121, 123, 126, 129, 132, 135, 137, 139, 141, 144,
      147, 150, 153, 155, 158, 160, 162, 164, 166, 168, 171, 174, 177, 180, 183, 185, 187, 190, 192,
      194, 196, 199, 202, 204, 207, 210, 213, 216, 219, 221, 223, 225, 228, 231, 234, 237, 240, 243,
      246, 249, 251, 253, 255, 258, 261, 263, 266, 269, 272, 275, 278, 280, 282, 283, 285, 287, 289,
      292, 294, 296, 298, 300, 302, 304, 306, 310, 313, 317, 318};
  static constexpr int kRowIndices_result[] = {
      0,  1,  2,  7,  8,  9,   10, 11, 12,  18,  19, 20,  21,  22,  23,  29,  30,  31, 32, 33,
      34, 40, 41, 42, 43, 44,  45, 51, 52,  53,  54, 55,  56,  62,  63,  64,  65,  66, 67, 73,
      75, 76, 77, 78, 84, 85,  87, 89, 95,  96,  97, 98,  99,  100, 102, 103, 104, 0,  1,  4,
      0,  1,  5,  0,  1,  6,   3,  13, 3,   12,  14, 4,   7,   15,  5,   16,  6,   9,  17, 7,
      10, 8,  11, 9,  12, 10,  11, 15, 10,  11,  16, 10,  17,  13,  14,  14,  23,  15, 18, 26,
      16, 19, 27, 17, 20, 28,  18, 21, 19,  22,  20, 23,  21,  22,  26,  21,  22,  27, 21, 22,
      28, 24, 25, 25, 34, 36,  26, 29, 37,  27,  30, 38,  28,  31,  39,  29,  32,  30, 33, 31,
      34, 32, 33, 37, 32, 33,  38, 32, 33,  39,  35, 36,  46,  36,  45,  37,  40,  48, 41, 49,
      42, 50, 40, 43, 41, 44,  42, 45, 43,  44,  48, 43,  44,  49,  43,  44,  50,  46, 47, 57,
      47, 56, 58, 51, 59, 49,  52, 50, 53,  61,  51, 54,  52,  55,  53,  56,  54,  55, 59, 54,
      55, 60, 54, 55, 57, 58,  68, 58, 67,  69,  59, 62,  70,  60,  63,  71,  61,  64, 72, 62,
      65, 63, 66, 64, 67, 65,  66, 70, 65,  66,  71, 65,  66,  72,  68,  69,  79,  69, 78, 80,
      70, 73, 81, 71, 74, 82,  72, 75, 83,  73,  76, 74,  77,  75,  78,  76,  77,  81, 76, 77,
      82, 77, 83, 79, 80, 90,  80, 89, 91,  81,  84, 92,  82,  85,  93,  83,  86,  94, 84, 87,
      85, 88, 89, 88, 92, 88,  93, 88, 94,  90,  91, 101, 91,  100, 92,  95,  93,  96, 94, 97,
      95, 98, 96, 99, 97, 100, 98, 99, 102, 103, 98, 99,  102, 98,  102, 103, 104, 101};
  Scalar result_empty_value_ptr[318];
  Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
      kRows_result, kCols_result, kNumNonZero_result, kColPtrs_result, kRowIndices_result,
      result_empty_value_ptr);
  Scalar* result_value_ptr = result.valuePtr();

  result_value_ptr[0] = 1;
  result_value_ptr[1] = 2;
  result_value_ptr[2] = 2;
  result_value_ptr[3] = 3;
  result_value_ptr[4] = -_tmp0 * x1;
  result_value_ptr[5] = 3;
  result_value_ptr[6] = _tmp1;
  result_value_ptr[7] = _tmp3;
  result_value_ptr[8] = -1;
  result_value_ptr[9] = _tmp4;
  result_value_ptr[10] = _tmp7;
  result_value_ptr[11] = _tmp8;
  result_value_ptr[12] = x0;
  result_value_ptr[13] = -1;
  result_value_ptr[14] = _tmp10;
  result_value_ptr[15] = _tmp12;
  result_value_ptr[16] = _tmp13;
  result_value_ptr[17] = -_tmp14;
  result_value_ptr[18] = x0;
  result_value_ptr[19] = _tmp16;
  result_value_ptr[20] = x1;
  result_value_ptr[21] = _tmp8;
  result_value_ptr[22] = _tmp14;
  result_value_ptr[23] = _tmp16;
  result_value_ptr[24] = _tmp2;
  result_value_ptr[25] = -_tmp17 - _tmp18;
  result_value_ptr[26] = x0;
  result_value_ptr[27] = _tmp13;
  result_value_ptr[28] = -_tmp12 - x0;
  result_value_ptr[29] = _tmp19;
  result_value_ptr[30] = _tmp21;
  result_value_ptr[31] = x1 - 3;
  result_value_ptr[32] = _tmp24;
  result_value_ptr[33] = _tmp23;
  result_value_ptr[34] = _tmp25;
  result_value_ptr[35] = _tmp26;
  result_value_ptr[36] = _tmp27;
  result_value_ptr[37] = 1;
  result_value_ptr[38] = 2;
  result_value_ptr[39] = Scalar(1.0);
  result_value_ptr[40] = -_tmp24 - 2;
  result_value_ptr[41] = _tmp28;
  result_value_ptr[42] = 2;
  result_value_ptr[43] = _tmp30;
  result_value_ptr[44] = -1;
  result_value_ptr[45] = -4;
  result_value_ptr[46] = _tmp13 * x1;
  result_value_ptr[47] = 4;
  result_value_ptr[48] = _tmp3;
  result_value_ptr[49] = -2;
  result_value_ptr[50] = x1;
  result_value_ptr[51] = Scalar(2.0);
  result_value_ptr[52] = -2;
  result_value_ptr[53] = -2 * _tmp0;
  result_value_ptr[54] = 1;
  result_value_ptr[55] = _tmp1 + Scalar(1) / Scalar(2);
  result_value_ptr[56] = Scalar(1.0) * x0;
  result_value_ptr[57] = _tmp12;
  result_value_ptr[58] = 1;
  result_value_ptr[59] = -1;
  result_value_ptr[60] = _tmp13;
  result_value_ptr[61] = -3;
  result_value_ptr[62] = -2;
  result_value_ptr[63] = _tmp2 + 1;
  result_value_ptr[64] = -2;
  result_value_ptr[65] = -1;
  result_value_ptr[66] = _tmp11;
  result_value_ptr[67] = -1;
  result_value_ptr[68] = _tmp31;
  result_value_ptr[69] = 1;
  result_value_ptr[70] = -1;
  result_value_ptr[71] = -3;
  result_value_ptr[72] = _tmp7;
  result_value_ptr[73] = -2;
  result_value_ptr[74] = -2;
  result_value_ptr[75] = _tmp32;
  result_value_ptr[76] = 2;
  result_value_ptr[77] = _tmp19;
  result_value_ptr[78] = 2;
  result_value_ptr[79] = -2;
  result_value_ptr[80] = 2;
  result_value_ptr[81] = -1;
  result_value_ptr[82] = _tmp31;
  result_value_ptr[83] = _tmp15 + x0;
  result_value_ptr[84] = 2;
  result_value_ptr[85] = _tmp33;
  result_value_ptr[86] = Scalar(-3.0);
  result_value_ptr[87] = Scalar(-2.0);
  result_value_ptr[88] = _tmp26;
  result_value_ptr[89] = _tmp6;
  result_value_ptr[90] = 2;
  result_value_ptr[91] = 1;
  result_value_ptr[92] = _tmp12;
  result_value_ptr[93] = _tmp34;
  result_value_ptr[94] = -2;
  result_value_ptr[95] = 2;
  result_value_ptr[96] = _tmp8 * x0;
  result_value_ptr[97] = 1;
  result_value_ptr[98] = x0;
  result_value_ptr[99] = _tmp27;
  result_value_ptr[100] = _tmp11 + 1;
  result_value_ptr[101] = _tmp35;
  result_value_ptr[102] = _tmp9;
  result_value_ptr[103] = _tmp5;
  result_value_ptr[104] = _tmp2;
  result_value_ptr[105] = -2;
  result_value_ptr[106] = _tmp28;
  result_value_ptr[107] = _tmp5;
  result_value_ptr[108] = _tmp11;
  result_value_ptr[109] = _tmp21;
  result_value_ptr[110] = _tmp32;
  result_value_ptr[111] = -_tmp22;
  result_value_ptr[112] = _tmp30;
  result_value_ptr[113] = _tmp10;
  result_value_ptr[114] = 2;
  result_value_ptr[115] = _tmp22 * _tmp33;
  result_value_ptr[116] = _tmp35;
  result_value_ptr[117] = _tmp2 + 2;
  result_value_ptr[118] = -1;
  result_value_ptr[119] = _tmp26;
  result_value_ptr[120] = _tmp36;
  result_value_ptr[121] = x0;
  result_value_ptr[122] = _tmp5;
  result_value_ptr[123] = 2;
  result_value_ptr[124] = x0;
  result_value_ptr[125] = 2;
  result_value_ptr[126] = _tmp10;
  result_value_ptr[127] = _tmp32;
  result_value_ptr[128] = _tmp5;
  result_value_ptr[129] = -1;
  result_value_ptr[130] = _tmp27;
  result_value_ptr[131] = 1;
  result_value_ptr[132] = _tmp31;
  result_value_ptr[133] = -4;
  result_value_ptr[134] = -1;
  result_value_ptr[135] = x0;
  result_value_ptr[136] = -8;
  result_value_ptr[137] = -1;
  result_value_ptr[138] = _tmp2;
  result_value_ptr[139] = -2;
  result_value_ptr[140] = Scalar(1.0);
  result_value_ptr[141] = -2;
  result_value_ptr[142] = _tmp34;
  result_value_ptr[143] = 4 - _tmp11;
  result_value_ptr[144] = _tmp16;
  result_value_ptr[145] = Scalar(-3.0);
  result_value_ptr[146] = x0;
  result_value_ptr[147] = (Scalar(1) / Scalar(2)) * x0;
  result_value_ptr[148] = _tmp37;
  result_value_ptr[149] = -3;
  result_value_ptr[150] = x1;
  result_value_ptr[151] = _tmp10;
  result_value_ptr[152] = x0;
  result_value_ptr[153] = _tmp11;
  result_value_ptr[154] = -4;
  result_value_ptr[155] = -2;
  result_value_ptr[156] = x1;
  result_value_ptr[157] = -4;
  result_value_ptr[158] = 1;
  result_value_ptr[159] = _tmp36;
  result_value_ptr[160] = 1;
  result_value_ptr[161] = -2;
  result_value_ptr[162] = 4;
  result_value_ptr[163] = -1;
  result_value_ptr[164] = x1 + 3;
  result_value_ptr[165] = x0;
  result_value_ptr[166] = 2;
  result_value_ptr[167] = 2;
  result_value_ptr[168] = 4;
  result_value_ptr[169] = _tmp6;
  result_value_ptr[170] = 1;
  result_value_ptr[171] = 1;
  result_value_ptr[172] = 6;
  result_value_ptr[173] = _tmp34;
  result_value_ptr[174] = Scalar(1.0);
  result_value_ptr[175] = x1;
  result_value_ptr[176] = -2;
  result_value_ptr[177] = _tmp23 + 2;
  result_value_ptr[178] = -2;
  result_value_ptr[179] = _tmp9;
  result_value_ptr[180] = _tmp10;
  result_value_ptr[181] = 2;
  result_value_ptr[182] = 3;
  result_value_ptr[183] = 2;
  result_value_ptr[184] = 1;
  result_value_ptr[185] = x0;
  result_value_ptr[186] = -_tmp38;
  result_value_ptr[187] = _tmp11;
  result_value_ptr[188] = 2;
  result_value_ptr[189] = x0;
  result_value_ptr[190] = 4;
  result_value_ptr[191] = x0;
  result_value_ptr[192] = -1;
  result_value_ptr[193] = -_tmp1;
  result_value_ptr[194] = -2;
  result_value_ptr[195] = _tmp5;
  result_value_ptr[196] = x0;
  result_value_ptr[197] = 1;
  result_value_ptr[198] = -1;
  result_value_ptr[199] = x0;
  result_value_ptr[200] = -2;
  result_value_ptr[201] = -1;
  result_value_ptr[202] = _tmp32;
  result_value_ptr[203] = _tmp12;
  result_value_ptr[204] = _tmp36;
  result_value_ptr[205] = -2;
  result_value_ptr[206] = -1;
  result_value_ptr[207] = 3;
  result_value_ptr[208] = _tmp39;
  result_value_ptr[209] = _tmp34;
  result_value_ptr[210] = -4;
  result_value_ptr[211] = 1;
  result_value_ptr[212] = -2;
  result_value_ptr[213] = -5;
  result_value_ptr[214] = -8;
  result_value_ptr[215] = -_tmp25;
  result_value_ptr[216] = -1;
  result_value_ptr[217] = 1;
  result_value_ptr[218] = -2;
  result_value_ptr[219] = -1;
  result_value_ptr[220] = 1;
  result_value_ptr[221] = x1;
  result_value_ptr[222] = x1;
  result_value_ptr[223] = _tmp37;
  result_value_ptr[224] = _tmp15;
  result_value_ptr[225] = -4;
  result_value_ptr[226] = _tmp13;
  result_value_ptr[227] = x1;
  result_value_ptr[228] = -1;
  result_value_ptr[229] = _tmp32;
  result_value_ptr[230] = -1;
  result_value_ptr[231] = -3;
  result_value_ptr[232] = _tmp13;
  result_value_ptr[233] = _tmp2 + x1;
  result_value_ptr[234] = x0;
  result_value_ptr[235] = _tmp40;
  result_value_ptr[236] = 1;
  result_value_ptr[237] = 1;
  result_value_ptr[238] = 2;
  result_value_ptr[239] = -2;
  result_value_ptr[240] = _tmp28;
  result_value_ptr[241] = _tmp2;
  result_value_ptr[242] = x0;
  result_value_ptr[243] = _tmp9;
  result_value_ptr[244] = 1 - _tmp11;
  result_value_ptr[245] = _tmp8;
  result_value_ptr[246] = x0;
  result_value_ptr[247] = -1;
  result_value_ptr[248] = _tmp16;
  result_value_ptr[249] = _tmp39;
  result_value_ptr[250] = _tmp5;
  result_value_ptr[251] = _tmp41;
  result_value_ptr[252] = Scalar(-3.0);
  result_value_ptr[253] = _tmp15;
  result_value_ptr[254] = _tmp10;
  result_value_ptr[255] = _tmp11 + x0;
  result_value_ptr[256] = _tmp4;
  result_value_ptr[257] = 1;
  result_value_ptr[258] = _tmp10;
  result_value_ptr[259] = _tmp16;
  result_value_ptr[260] = -2;
  result_value_ptr[261] = 2;
  result_value_ptr[262] = -_tmp12 - _tmp2;
  result_value_ptr[263] = _tmp29 + 1;
  result_value_ptr[264] = 4;
  result_value_ptr[265] = -1;
  result_value_ptr[266] = x1;
  result_value_ptr[267] = -2;
  result_value_ptr[268] = -1;
  result_value_ptr[269] = _tmp8;
  result_value_ptr[270] = _tmp38;
  result_value_ptr[271] = 2;
  result_value_ptr[272] = -2;
  result_value_ptr[273] = 2;
  result_value_ptr[274] = _tmp3;
  result_value_ptr[275] = -2;
  result_value_ptr[276] = -2;
  result_value_ptr[277] = -1;
  result_value_ptr[278] = x0 + x1;
  result_value_ptr[279] = _tmp10;
  result_value_ptr[280] = _tmp20 - 2;
  result_value_ptr[281] = 2;
  result_value_ptr[282] = x0;
  result_value_ptr[283] = x1;
  result_value_ptr[284] = x1;
  result_value_ptr[285] = _tmp11;
  result_value_ptr[286] = x0;
  result_value_ptr[287] = -2;
  result_value_ptr[288] = -1;
  result_value_ptr[289] = 1;
  result_value_ptr[290] = _tmp31;
  result_value_ptr[291] = -2;
  result_value_ptr[292] = -1;
  result_value_ptr[293] = 4;
  result_value_ptr[294] = x0;
  result_value_ptr[295] = -2;
  result_value_ptr[296] = x0;
  result_value_ptr[297] = 2;
  result_value_ptr[298] = _tmp12;
  result_value_ptr[299] = _tmp8;
  result_value_ptr[300] = 1;
  result_value_ptr[301] = _tmp10;
  result_value_ptr[302] = x0;
  result_value_ptr[303] = _tmp5;
  result_value_ptr[304] = _tmp23 + x1;
  result_value_ptr[305] = -2;
  result_value_ptr[306] = 2;
  result_value_ptr[307] = _tmp16;
  result_value_ptr[308] = 2;
  result_value_ptr[309] = -_tmp40;
  result_value_ptr[310] = _tmp41;
  result_value_ptr[311] = _tmp10;
  result_value_ptr[312] = _tmp17;
  result_value_ptr[313] = -1;
  result_value_ptr[314] = _tmp32;
  result_value_ptr[315] = Scalar(-1.0);
  result_value_ptr[316] = _tmp20 + 2;
  result_value_ptr[317] = Scalar(-2.0);

  return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
