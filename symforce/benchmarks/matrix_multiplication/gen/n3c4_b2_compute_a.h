// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <Eigen/Sparse>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     x0: Scalar
 *     x1: Scalar
 *
 * Outputs:
 *     result: Matrix20_15
 *
 */
template <typename Scalar>
Eigen::SparseMatrix<Scalar> N3C4B2ComputeA(const Scalar x0, const Scalar x1) {
  // Total ops: 28

  // Input arrays

  // Intermediate terms (9)
  const Scalar _tmp0 = x1 + 2;
  const Scalar _tmp1 = 2 * x0;
  const Scalar _tmp2 = 2 * x1;
  const Scalar _tmp3 = x0 + 2;
  const Scalar _tmp4 = -_tmp3;
  const Scalar _tmp5 = x1 - 1;
  const Scalar _tmp6 = 2 - x1;
  const Scalar _tmp7 = 3 * x0;
  const Scalar _tmp8 = -x1;

  // Output terms (1)
  static constexpr int kRows_result = 20;
  static constexpr int kCols_result = 15;
  static constexpr int kNumNonZero_result = 58;
  static constexpr int kColPtrs_result[] = {0,  3,  7,  11, 15, 19, 23, 27,
                                            31, 35, 38, 42, 46, 50, 54, 58};
  static constexpr int kRowIndices_result[] = {
      15, 18, 19, 8, 14, 17, 19, 7, 13, 16, 19, 6, 12, 17, 18, 5, 11, 16, 18, 4,
      10, 16, 17, 3, 12, 14, 15, 2, 11, 13, 15, 1, 10, 13, 14, 0, 10, 12, 3,  6,
      8,  9,  2,  5, 7,  9,  1,  4, 7,  8,  0,  4, 5,  6,  0,  1, 2,  3};
  Scalar result_empty_value_ptr[58];
  Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
      kRows_result, kCols_result, kNumNonZero_result, kColPtrs_result, kRowIndices_result,
      result_empty_value_ptr);
  Scalar* result_value_ptr = result.valuePtr();

  result_value_ptr[0] = x1;
  result_value_ptr[1] = 2;
  result_value_ptr[2] = 1;
  result_value_ptr[3] = _tmp0;
  result_value_ptr[4] = x1 + 1;
  result_value_ptr[5] = _tmp1;
  result_value_ptr[6] = x0 + 3;
  result_value_ptr[7] = x0;
  result_value_ptr[8] = 3;
  result_value_ptr[9] = _tmp2;
  result_value_ptr[10] = 4;
  result_value_ptr[11] = -1;
  result_value_ptr[12] = _tmp4;
  result_value_ptr[13] = x0;
  result_value_ptr[14] = _tmp2;
  result_value_ptr[15] = 3;
  result_value_ptr[16] = x1;
  result_value_ptr[17] = 3;
  result_value_ptr[18] = -2;
  result_value_ptr[19] = _tmp5;
  result_value_ptr[20] = -x0 * x1;
  result_value_ptr[21] = -x0;
  result_value_ptr[22] = -_tmp1;
  result_value_ptr[23] = -2;
  result_value_ptr[24] = _tmp6;
  result_value_ptr[25] = -2;
  result_value_ptr[26] = _tmp0;
  result_value_ptr[27] = -1;
  result_value_ptr[28] = Scalar(2.0);
  result_value_ptr[29] = 6;
  result_value_ptr[30] = _tmp2 + 1;
  result_value_ptr[31] = 2;
  result_value_ptr[32] = _tmp6;
  result_value_ptr[33] = -1;
  result_value_ptr[34] = _tmp7;
  result_value_ptr[35] = Scalar(1.0);
  result_value_ptr[36] = -1;
  result_value_ptr[37] = _tmp2;
  result_value_ptr[38] = _tmp8;
  result_value_ptr[39] = 4;
  result_value_ptr[40] = _tmp3;
  result_value_ptr[41] = -2;
  result_value_ptr[42] = 1;
  result_value_ptr[43] = 1;
  result_value_ptr[44] = x0;
  result_value_ptr[45] = _tmp1 - 2;
  result_value_ptr[46] = _tmp4;
  result_value_ptr[47] = -_tmp5;
  result_value_ptr[48] = x1;
  result_value_ptr[49] = x1;
  result_value_ptr[50] = _tmp2;
  result_value_ptr[51] = x0 + 1;
  result_value_ptr[52] = _tmp8;
  result_value_ptr[53] = 1;
  result_value_ptr[54] = _tmp2;
  result_value_ptr[55] = _tmp4;
  result_value_ptr[56] = x1;
  result_value_ptr[57] = -_tmp7;

  return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
