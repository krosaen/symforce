// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     x0: Scalar
 *     x1: Scalar
 *
 * Outputs:
 *     result: Matrix11_11
 *
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 11, 11> TinaDiscogComputeADense(const Scalar x0, const Scalar x1) {
  // Total ops: 37

  // Input arrays

  // Intermediate terms (4)
  const Scalar _tmp0 = x0 + 2;
  const Scalar _tmp1 = std::pow(x0, Scalar(2));
  const Scalar _tmp2 = 2 * x0;
  const Scalar _tmp3 = 2 * x1;

  // Output terms (1)
  Eigen::Matrix<Scalar, 11, 11> _result;

  _result(0, 0) = 0;
  _result(0, 1) = -1 / x0;
  _result(0, 2) = 1 - x0;
  _result(0, 3) = 0;
  _result(0, 4) = 0;
  _result(0, 5) = 1;
  _result(0, 6) = 0;
  _result(0, 7) = 0;
  _result(0, 8) = 0;
  _result(0, 9) = -2;
  _result(0, 10) = 0;
  _result(1, 0) = 0;
  _result(1, 1) = 0;
  _result(1, 2) = 0;
  _result(1, 3) = 4;
  _result(1, 4) = 0;
  _result(1, 5) = -4 * x1;
  _result(1, 6) = 0;
  _result(1, 7) = -x0 + x1 + 2;
  _result(1, 8) = 0;
  _result(1, 9) = 0;
  _result(1, 10) = 0;
  _result(2, 0) = 2;
  _result(2, 1) = 2;
  _result(2, 2) = 0;
  _result(2, 3) = 3;
  _result(2, 4) = -2;
  _result(2, 5) = _tmp0 * x0;
  _result(2, 6) = x0 - 2;
  _result(2, 7) = -3;
  _result(2, 8) = 0;
  _result(2, 9) = -_tmp1;
  _result(2, 10) = 0;
  _result(3, 0) = 0;
  _result(3, 1) = 0;
  _result(3, 2) = 0;
  _result(3, 3) = 0;
  _result(3, 4) = 0;
  _result(3, 5) = 0;
  _result(3, 6) = 2;
  _result(3, 7) = 4;
  _result(3, 8) = 0;
  _result(3, 9) = 0;
  _result(3, 10) = 0;
  _result(4, 0) = 0;
  _result(4, 1) = 2;
  _result(4, 2) = 0;
  _result(4, 3) = _tmp0;
  _result(4, 4) = 0;
  _result(4, 5) = x0 * x1 + x0;
  _result(4, 6) = -2;
  _result(4, 7) = _tmp2;
  _result(4, 8) = 0;
  _result(4, 9) = 0;
  _result(4, 10) = 0;
  _result(5, 0) = 0;
  _result(5, 1) = 2;
  _result(5, 2) = 0;
  _result(5, 3) = _tmp0 - x1;
  _result(5, 4) = -2;
  _result(5, 5) = 0;
  _result(5, 6) = _tmp3;
  _result(5, 7) = -x1 - 1;
  _result(5, 8) = 0;
  _result(5, 9) = 0;
  _result(5, 10) = 0;
  _result(6, 0) = 0;
  _result(6, 1) = 0;
  _result(6, 2) = 0;
  _result(6, 3) = 1;
  _result(6, 4) = 0;
  _result(6, 5) = 0;
  _result(6, 6) = 0;
  _result(6, 7) = -4 * x0;
  _result(6, 8) = x0;
  _result(6, 9) = 0;
  _result(6, 10) = Scalar(-2.0);
  _result(7, 0) = 0;
  _result(7, 1) = Scalar(1.0);
  _result(7, 2) = 0;
  _result(7, 3) = -2 / _tmp1;
  _result(7, 4) = 0;
  _result(7, 5) = 0;
  _result(7, 6) = x0 / _tmp0;
  _result(7, 7) = 0;
  _result(7, 8) = 0;
  _result(7, 9) = 0;
  _result(7, 10) = -4;
  _result(8, 0) = 0;
  _result(8, 1) = _tmp2 + 2;
  _result(8, 2) = 1 + Scalar(1.0) / (x1);
  _result(8, 3) = 0;
  _result(8, 4) = 0;
  _result(8, 5) = 0;
  _result(8, 6) = 4;
  _result(8, 7) = 2;
  _result(8, 8) = 0;
  _result(8, 9) = 0;
  _result(8, 10) = x0;
  _result(9, 0) = _tmp2;
  _result(9, 1) = x1 + 4;
  _result(9, 2) = -1;
  _result(9, 3) = 0;
  _result(9, 4) = -_tmp3;
  _result(9, 5) = 0;
  _result(9, 6) = 0;
  _result(9, 7) = 0;
  _result(9, 8) = 0;
  _result(9, 9) = 0;
  _result(9, 10) = 0;
  _result(10, 0) = 0;
  _result(10, 1) = 0;
  _result(10, 2) = 0;
  _result(10, 3) = 1;
  _result(10, 4) = 0;
  _result(10, 5) = 2;
  _result(10, 6) = 0;
  _result(10, 7) = -2;
  _result(10, 8) = 0;
  _result(10, 9) = 0;
  _result(10, 10) = 0;

  return _result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
