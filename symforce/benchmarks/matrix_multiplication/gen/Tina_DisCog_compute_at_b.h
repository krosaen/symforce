// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     x0: Scalar
 *     x1: Scalar
 *
 * Outputs:
 *     result: Matrix11_11
 *
 */
template <typename Scalar>
__attribute__((noinline)) Eigen::Matrix<Scalar, 11, 11> TinaDiscogComputeAtB(const Scalar x0,
                                                                             const Scalar x1) {
  // Total ops: 246

  // Input arrays

  // Intermediate terms (62)
  const Scalar _tmp0 = 4 * x0;
  const Scalar _tmp1 = 2 * x1;
  const Scalar _tmp2 = _tmp1 * x0;
  const Scalar _tmp3 = _tmp1 - 8;
  const Scalar _tmp4 = _tmp1 + 2;
  const Scalar _tmp5 = -_tmp4;
  const Scalar _tmp6 = Scalar(2.0) * x0;
  const Scalar _tmp7 = 2 * x0;
  const Scalar _tmp8 = _tmp7 - 4;
  const Scalar _tmp9 = _tmp1 + 4;
  const Scalar _tmp10 = Scalar(1.0) * x0;
  const Scalar _tmp11 = x1 + 4;
  const Scalar _tmp12 = _tmp11 * x1;
  const Scalar _tmp13 = _tmp7 + 2;
  const Scalar _tmp14 = _tmp1 + 1;
  const Scalar _tmp15 = Scalar(1.0) / (x0);
  const Scalar _tmp16 = _tmp1 + _tmp7;
  const Scalar _tmp17 = -_tmp1;
  const Scalar _tmp18 = x0 + 2;
  const Scalar _tmp19 = _tmp0 * x1;
  const Scalar _tmp20 = -_tmp7;
  const Scalar _tmp21 = _tmp19 + _tmp4;
  const Scalar _tmp22 = x1 - 3;
  const Scalar _tmp23 = _tmp20 + _tmp9;
  const Scalar _tmp24 = x0 - 1;
  const Scalar _tmp25 = Scalar(1.0) / (x1);
  const Scalar _tmp26 = _tmp25 + 1;
  const Scalar _tmp27 = -x0;
  const Scalar _tmp28 = -Scalar(1.0) * x1;
  const Scalar _tmp29 = 6 * x0;
  const Scalar _tmp30 = 3 * x1;
  const Scalar _tmp31 = -_tmp30;
  const Scalar _tmp32 = std::pow(x0, Scalar(2));
  const Scalar _tmp33 = 2 / _tmp32;
  const Scalar _tmp34 = 3 * x0;
  const Scalar _tmp35 = _tmp25 * (x0 + x1);
  const Scalar _tmp36 = _tmp2 * (_tmp18 - x1);
  const Scalar _tmp37 = _tmp18 * x0;
  const Scalar _tmp38 = -_tmp33;
  const Scalar _tmp39 = (Scalar(1) / Scalar(2)) * x1;
  const Scalar _tmp40 = _tmp39 * x0;
  const Scalar _tmp41 = Scalar(1.0) / (x1 - 2);
  const Scalar _tmp42 = 4 * x1;
  const Scalar _tmp43 = std::pow(x1, Scalar(2));
  const Scalar _tmp44 = _tmp18 * _tmp7;
  const Scalar _tmp45 = x1 - 4;
  const Scalar _tmp46 = x1 + 1;
  const Scalar _tmp47 = -_tmp37 * _tmp46;
  const Scalar _tmp48 = x0 * x1;
  const Scalar _tmp49 = _tmp48 + x0;
  const Scalar _tmp50 = x0 - 2;
  const Scalar _tmp51 = _tmp0 + 8;
  const Scalar _tmp52 = _tmp0 * _tmp43;
  const Scalar _tmp53 = -_tmp46 * _tmp50;
  const Scalar _tmp54 = Scalar(1.0) / (_tmp18);
  const Scalar _tmp55 = 2 * _tmp32;
  const Scalar _tmp56 = _tmp54 * x0;
  const Scalar _tmp57 = _tmp2 * _tmp46;
  const Scalar _tmp58 = 6 * x1;
  const Scalar _tmp59 = 8 * x0;
  const Scalar _tmp60 = -_tmp55;
  const Scalar _tmp61 = _tmp32 * _tmp46;

  // Output terms (1)
  Eigen::Matrix<Scalar, 11, 11> _result;

  _result(0, 0) = 4 - _tmp0;
  _result(0, 1) = _tmp2 + _tmp3;
  _result(0, 2) = -_tmp0;
  _result(0, 3) = _tmp5;
  _result(0, 4) = _tmp6 * x1 + 4;
  _result(0, 5) = -2;
  _result(0, 6) = 6;
  _result(0, 7) = _tmp5;
  _result(0, 8) = 0;
  _result(0, 9) = -_tmp8;
  _result(0, 10) = 0;
  _result(1, 0) = -_tmp9;
  _result(1, 1) = _tmp1 + _tmp10 + _tmp12 + _tmp13 * _tmp14 - _tmp15 * _tmp16 + Scalar(-18.0);
  _result(1, 2) = -_tmp13 * _tmp18 - _tmp15 + _tmp17 - 8;
  _result(1, 3) = _tmp17 + _tmp19 - _tmp6 + 2;
  _result(1, 4) = Scalar(1.0) * _tmp12 + 2;
  _result(1, 5) = -_tmp15 - _tmp20 - 2;
  _result(1, 6) = Scalar(6.0) - _tmp10;
  _result(1, 7) = _tmp13 * x0 - _tmp21;
  _result(1, 8) = 0;
  _result(1, 9) = _tmp15 * _tmp22 + _tmp23;
  _result(1, 10) = Scalar(-1.0);
  _result(2, 0) = 2;
  _result(2, 1) = _tmp14 * _tmp26 - _tmp16 * _tmp24 - x1;
  _result(2, 2) = -_tmp18 * _tmp26 + _tmp27 + 3;
  _result(2, 3) = 0;
  _result(2, 4) = _tmp28;
  _result(2, 5) = -_tmp24;
  _result(2, 6) = -Scalar(0.5) * _tmp25 + Scalar(-0.5);
  _result(2, 7) = _tmp26 * x0;
  _result(2, 8) = 0;
  _result(2, 9) = _tmp22 * _tmp24;
  _result(2, 10) = 0;
  _result(3, 0) = 6;
  _result(3, 1) = -_tmp18 * _tmp33 - _tmp29 - _tmp31 - 24;
  _result(3, 2) = 0;
  _result(3, 3) = 4 * _tmp15 - _tmp25 + _tmp31 + _tmp34 + 4 * _tmp35 + _tmp36 + 1;
  _result(3, 4) = _tmp11 + _tmp27;
  _result(3, 5) = _tmp37 - 4;
  _result(3, 6) = _tmp1 + _tmp38 + 9;
  _result(3, 7) = -_tmp20 - _tmp30 - _tmp36 - _tmp40 + 9;
  _result(3, 8) = _tmp39;
  _result(3, 9) = _tmp18 * x1 - _tmp34 + 6;
  _result(3, 10) = -_tmp38 - 2 * _tmp41;
  _result(4, 0) = _tmp42 - 4;
  _result(4, 1) = -_tmp3 - 2 * _tmp43;
  _result(4, 2) = _tmp42;
  _result(4, 3) = -_tmp19 + _tmp4;
  _result(4, 4) = -Scalar(2.0) * _tmp43 - 2;
  _result(4, 5) = 2;
  _result(4, 6) = -2;
  _result(4, 7) = _tmp21;
  _result(4, 8) = 0;
  _result(4, 9) = _tmp8;
  _result(4, 10) = 0;
  _result(5, 0) = _tmp44;
  _result(5, 1) = -_tmp0 - _tmp17 - _tmp29 * x1 + _tmp37 * _tmp45;
  _result(5, 2) = 1;
  _result(5, 3) = _tmp2 - _tmp42 + _tmp47;
  _result(5, 4) = _tmp44;
  _result(5, 5) = -_tmp37 + _tmp49 * x0 - 1;
  _result(5, 6) = _tmp18 * _tmp34 + _tmp2 + _tmp7;
  _result(5, 7) = _tmp47 - _tmp48 - 12 * x1;
  _result(5, 8) = 0;
  _result(5, 9) = -_tmp22 - _tmp37 * _tmp50 + _tmp49 * x1;
  _result(5, 10) = 0;
  _result(6, 0) = _tmp8;
  _result(6, 1) = _tmp45 * _tmp50 + x0 + 8 * x1 + 16;
  _result(6, 2) = -_tmp51;
  _result(6, 3) = _tmp52 + _tmp53 - _tmp54 * _tmp55 - 4;
  _result(6, 4) = -_tmp23;
  _result(6, 5) = 2 - _tmp34;
  _result(6, 6) = _tmp17 + _tmp34 + _tmp56 + Scalar(-16.0);
  _result(6, 7) = _tmp0 - _tmp52 + _tmp53 + 6;
  _result(6, 8) = 0;
  _result(6, 9) = _tmp17 - std::pow(_tmp50, Scalar(2));
  _result(6, 10) = -_tmp56;
  _result(7, 0) = -6;
  _result(7, 1) = -12 * x0 + x1 + 14;
  _result(7, 2) = -_tmp7 - 4;
  _result(7, 3) = _tmp0 * _tmp25 + _tmp30 + _tmp35 * (_tmp27 + x1 + 2) - _tmp57 + _tmp7 + 3;
  _result(7, 4) = x1 - 5;
  _result(7, 5) = _tmp55 + 5;
  _result(7, 6) = _tmp0 + _tmp58 + Scalar(-16.0);
  _result(7, 7) = _tmp27 - 8 * _tmp32 + _tmp48 + _tmp57 + _tmp58 + 21;
  _result(7, 8) = -_tmp2;
  _result(7, 9) = _tmp2 + _tmp34 - 6;
  _result(7, 10) = _tmp41 * _tmp59;
  _result(8, 0) = 0;
  _result(8, 1) = 0;
  _result(8, 2) = 0;
  _result(8, 3) = -_tmp25 * x0;
  _result(8, 4) = 0;
  _result(8, 5) = 0;
  _result(8, 6) = 0;
  _result(8, 7) = _tmp55;
  _result(8, 8) = _tmp40;
  _result(8, 9) = 0;
  _result(8, 10) = -_tmp41 * _tmp7;
  _result(9, 0) = _tmp60;
  _result(9, 1) = -_tmp0 - _tmp32 * _tmp45 - _tmp42;
  _result(9, 2) = -2;
  _result(9, 3) = _tmp61;
  _result(9, 4) = _tmp60;
  _result(9, 5) = _tmp32 - 2;
  _result(9, 6) = -3 * _tmp32;
  _result(9, 7) = _tmp61;
  _result(9, 8) = 0;
  _result(9, 9) = _tmp1 + _tmp32 * _tmp50 - 6;
  _result(9, 10) = 0;
  _result(10, 0) = 0;
  _result(10, 1) = _tmp14 * x0 - _tmp51;
  _result(10, 2) = -_tmp37;
  _result(10, 3) = Scalar(2.0) * _tmp25 + _tmp59;
  _result(10, 4) = 0;
  _result(10, 5) = 0;
  _result(10, 6) = -Scalar(0.5) * x0 - 4;
  _result(10, 7) = _tmp32 - Scalar(4.0) * x0;
  _result(10, 8) = _tmp28;
  _result(10, 9) = 0;
  _result(10, 10) = Scalar(4.0) * _tmp41 + 4;

  return _result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
