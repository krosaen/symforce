// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <Eigen/Sparse>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     x0: Scalar
 *     x1: Scalar
 *
 * Outputs:
 *     result: Matrix36_84
 *
 */
template <typename Scalar>
Eigen::SparseMatrix<Scalar> Bibd93ComputeA(const Scalar x0, const Scalar x1) {
  // Total ops: 107

  // Input arrays

  // Intermediate terms (31)
  const Scalar _tmp0 = 4 * x0;
  const Scalar _tmp1 = x1 - 1;
  const Scalar _tmp2 = 2 * x0;
  const Scalar _tmp3 = 2 * x1;
  const Scalar _tmp4 = x1 + 2;
  const Scalar _tmp5 = -x0;
  const Scalar _tmp6 = std::pow(x0, Scalar(2));
  const Scalar _tmp7 = x0 - 1;
  const Scalar _tmp8 = -_tmp2;
  const Scalar _tmp9 = -_tmp3;
  const Scalar _tmp10 = x0 + 2;
  const Scalar _tmp11 = -_tmp10;
  const Scalar _tmp12 = x1 + 1;
  const Scalar _tmp13 = x0 + x1;
  const Scalar _tmp14 = x0 - 3;
  const Scalar _tmp15 = x0 + 1;
  const Scalar _tmp16 = -_tmp15;
  const Scalar _tmp17 = 2 * _tmp6;
  const Scalar _tmp18 = x0 * x1;
  const Scalar _tmp19 = -_tmp18;
  const Scalar _tmp20 = -_tmp13;
  const Scalar _tmp21 = _tmp2 - 4;
  const Scalar _tmp22 = x1 - 2;
  const Scalar _tmp23 = -x1;
  const Scalar _tmp24 = _tmp3 - 4;
  const Scalar _tmp25 = _tmp2 * x1;
  const Scalar _tmp26 = -_tmp12;
  const Scalar _tmp27 = _tmp23 + x0;
  const Scalar _tmp28 = -std::pow(x1, Scalar(2));
  const Scalar _tmp29 = -_tmp1;
  const Scalar _tmp30 = _tmp2 + 2;

  // Output terms (1)
  static constexpr int kRows_result = 36;
  static constexpr int kCols_result = 84;
  static constexpr int kNumNonZero_result = 237;
  static constexpr int kColPtrs_result[] = {
      0,   1,   4,   7,   10,  13,  16,  18,  20,  23,  25,  28,  31,  34,  36,  39,  42,
      45,  48,  51,  54,  57,  60,  63,  66,  69,  72,  75,  78,  81,  83,  86,  89,  92,
      95,  98,  100, 103, 106, 109, 112, 115, 118, 121, 124, 127, 129, 132, 135, 138, 141,
      144, 147, 150, 153, 156, 159, 161, 164, 166, 169, 172, 175, 178, 181, 184, 187, 190,
      192, 195, 197, 200, 203, 206, 209, 212, 215, 217, 219, 222, 225, 228, 231, 234, 237};
  static constexpr int kRowIndices_result[] = {
      1,  0,  2,  9,  0,  3,  10, 0,  4,  11, 0,  5,  12, 0,  6,  13, 7,  14, 1,  2,  1,  3,
      16, 1,  17, 1,  5,  18, 1,  6,  19, 1,  7,  20, 2,  21, 2,  4,  22, 2,  5,  23, 2,  6,
      24, 2,  7,  25, 3,  4,  26, 3,  5,  27, 3,  6,  28, 3,  7,  29, 4,  5,  30, 4,  6,  31,
      4,  7,  32, 5,  6,  33, 5,  7,  34, 6,  7,  35, 8,  9,  15, 8,  16, 8,  11, 17, 8,  12,
      18, 8,  13, 19, 8,  14, 20, 9,  10, 21, 9,  11, 9,  12, 23, 9,  13, 24, 9,  14, 25, 10,
      11, 26, 10, 12, 27, 10, 13, 28, 10, 14, 29, 11, 12, 30, 11, 13, 31, 14, 32, 12, 13, 33,
      12, 14, 34, 13, 14, 35, 15, 16, 21, 15, 17, 22, 15, 18, 23, 15, 19, 24, 15, 20, 25, 16,
      17, 26, 16, 18, 27, 16, 28, 16, 20, 29, 18, 30, 17, 19, 31, 17, 20, 32, 18, 19, 33, 18,
      20, 34, 19, 20, 35, 21, 22, 26, 21, 23, 27, 21, 24, 28, 25, 29, 22, 23, 30, 22, 24, 22,
      25, 32, 23, 24, 33, 23, 25, 34, 24, 25, 35, 26, 27, 30, 26, 28, 31, 26, 29, 27, 28, 27,
      29, 34, 28, 29, 35, 30, 31, 33, 30, 32, 34, 31, 32, 35, 33, 34, 35};
  Scalar result_empty_value_ptr[237];
  Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
      kRows_result, kCols_result, kNumNonZero_result, kColPtrs_result, kRowIndices_result,
      result_empty_value_ptr);
  Scalar* result_value_ptr = result.valuePtr();

  result_value_ptr[0] = Scalar(-0.5);
  result_value_ptr[1] = _tmp0;
  result_value_ptr[2] = _tmp1;
  result_value_ptr[3] = -2;
  result_value_ptr[4] = _tmp2 + 1;
  result_value_ptr[5] = _tmp3;
  result_value_ptr[6] = x0;
  result_value_ptr[7] = -2;
  result_value_ptr[8] = -1;
  result_value_ptr[9] = -2;
  result_value_ptr[10] = _tmp4;
  result_value_ptr[11] = 4;
  result_value_ptr[12] = x0;
  result_value_ptr[13] = -4;
  result_value_ptr[14] = 2;
  result_value_ptr[15] = -1;
  result_value_ptr[16] = _tmp5;
  result_value_ptr[17] = x1;
  result_value_ptr[18] = -_tmp6;
  result_value_ptr[19] = -2;
  result_value_ptr[20] = -_tmp4;
  result_value_ptr[21] = 1;
  result_value_ptr[22] = 4;
  result_value_ptr[23] = -1;
  result_value_ptr[24] = 2;
  result_value_ptr[25] = 2;
  result_value_ptr[26] = -1;
  result_value_ptr[27] = 1;
  result_value_ptr[28] = -2;
  result_value_ptr[29] = x1 + 3;
  result_value_ptr[30] = -1;
  result_value_ptr[31] = -_tmp7;
  result_value_ptr[32] = _tmp8;
  result_value_ptr[33] = _tmp8;
  result_value_ptr[34] = 8;
  result_value_ptr[35] = 5;
  result_value_ptr[36] = _tmp7;
  result_value_ptr[37] = _tmp9;
  result_value_ptr[38] = Scalar(1.0);
  result_value_ptr[39] = _tmp2;
  result_value_ptr[40] = 2;
  result_value_ptr[41] = _tmp10;
  result_value_ptr[42] = 1;
  result_value_ptr[43] = Scalar(0.5);
  result_value_ptr[44] = Scalar(1.0);
  result_value_ptr[45] = -2;
  result_value_ptr[46] = 2;
  result_value_ptr[47] = _tmp11;
  result_value_ptr[48] = _tmp2;
  result_value_ptr[49] = _tmp12;
  result_value_ptr[50] = -4;
  result_value_ptr[51] = x1;
  result_value_ptr[52] = _tmp13 * x1;
  result_value_ptr[53] = 3;
  result_value_ptr[54] = x1;
  result_value_ptr[55] = 3 * x0;
  result_value_ptr[56] = x0;
  result_value_ptr[57] = _tmp5;
  result_value_ptr[58] = Scalar(-1.0);
  result_value_ptr[59] = 3;
  result_value_ptr[60] = 1;
  result_value_ptr[61] = x0;
  result_value_ptr[62] = -_tmp14;
  result_value_ptr[63] = _tmp3;
  result_value_ptr[64] = _tmp16;
  result_value_ptr[65] = _tmp2;
  result_value_ptr[66] = _tmp8;
  result_value_ptr[67] = _tmp9;
  result_value_ptr[68] = _tmp16;
  result_value_ptr[69] = Scalar(-1.0);
  result_value_ptr[70] = _tmp17;
  result_value_ptr[71] = _tmp19;
  result_value_ptr[72] = x0;
  result_value_ptr[73] = _tmp4;
  result_value_ptr[74] = 2;
  result_value_ptr[75] = 1;
  result_value_ptr[76] = _tmp16;
  result_value_ptr[77] = 1;
  result_value_ptr[78] = -1;
  result_value_ptr[79] = _tmp2;
  result_value_ptr[80] = _tmp3 - 2;
  result_value_ptr[81] = _tmp9;
  result_value_ptr[82] = _tmp10;
  result_value_ptr[83] = -3;
  result_value_ptr[84] = x1;
  result_value_ptr[85] = _tmp20;
  result_value_ptr[86] = -3;
  result_value_ptr[87] = 1;
  result_value_ptr[88] = _tmp5;
  result_value_ptr[89] = -_tmp21;
  result_value_ptr[90] = 1;
  result_value_ptr[91] = x1;
  result_value_ptr[92] = 1;
  result_value_ptr[93] = -_tmp3 - 2;
  result_value_ptr[94] = _tmp9;
  result_value_ptr[95] = -_tmp22;
  result_value_ptr[96] = x1;
  result_value_ptr[97] = -2;
  result_value_ptr[98] = _tmp8;
  result_value_ptr[99] = -1;
  result_value_ptr[100] = x1 - 4;
  result_value_ptr[101] = _tmp11;
  result_value_ptr[102] = _tmp23;
  result_value_ptr[103] = x0;
  result_value_ptr[104] = -2;
  result_value_ptr[105] = x0;
  result_value_ptr[106] = _tmp4;
  result_value_ptr[107] = Scalar(1.0);
  result_value_ptr[108] = _tmp12 + x0;
  result_value_ptr[109] = _tmp19;
  result_value_ptr[110] = 4;
  result_value_ptr[111] = 2;
  result_value_ptr[112] = _tmp2;
  result_value_ptr[113] = x0;
  result_value_ptr[114] = _tmp24;
  result_value_ptr[115] = -1;
  result_value_ptr[116] = x1;
  result_value_ptr[117] = _tmp8;
  result_value_ptr[118] = _tmp18;
  result_value_ptr[119] = _tmp18 - 2;
  result_value_ptr[120] = _tmp1 + x0;
  result_value_ptr[121] = _tmp2;
  result_value_ptr[122] = _tmp5;
  result_value_ptr[123] = 3;
  result_value_ptr[124] = _tmp11;
  result_value_ptr[125] = -_tmp25;
  result_value_ptr[126] = _tmp2 - 2;
  result_value_ptr[127] = 4;
  result_value_ptr[128] = _tmp3;
  result_value_ptr[129] = x0;
  result_value_ptr[130] = x1 + Scalar(-0.5);
  result_value_ptr[131] = 4;
  result_value_ptr[132] = -_tmp2 - _tmp3;
  result_value_ptr[133] = 1;
  result_value_ptr[134] = _tmp26;
  result_value_ptr[135] = _tmp23;
  result_value_ptr[136] = _tmp23;
  result_value_ptr[137] = 3;
  result_value_ptr[138] = (Scalar(1) / Scalar(2)) / x0;
  result_value_ptr[139] = _tmp5;
  result_value_ptr[140] = -_tmp27;
  result_value_ptr[141] = _tmp12;
  result_value_ptr[142] = _tmp15;
  result_value_ptr[143] = _tmp18;
  result_value_ptr[144] = _tmp20;
  result_value_ptr[145] = _tmp15 * x0;
  result_value_ptr[146] = Scalar(1.0);
  result_value_ptr[147] = _tmp14;
  result_value_ptr[148] = -2;
  result_value_ptr[149] = 2;
  result_value_ptr[150] = x1;
  result_value_ptr[151] = -_tmp24;
  result_value_ptr[152] = _tmp8;
  result_value_ptr[153] = x1;
  result_value_ptr[154] = 3 - x1;
  result_value_ptr[155] = -3;
  result_value_ptr[156] = 2;
  result_value_ptr[157] = x0;
  result_value_ptr[158] = x1;
  result_value_ptr[159] = 1;
  result_value_ptr[160] = _tmp28;
  result_value_ptr[161] = 4;
  result_value_ptr[162] = 1;
  result_value_ptr[163] = _tmp10;
  result_value_ptr[164] = -1;
  result_value_ptr[165] = -1;
  result_value_ptr[166] = _tmp28;
  result_value_ptr[167] = _tmp10;
  result_value_ptr[168] = _tmp8;
  result_value_ptr[169] = -1;
  result_value_ptr[170] = _tmp25;
  result_value_ptr[171] = 2;
  result_value_ptr[172] = 1;
  result_value_ptr[173] = 1;
  result_value_ptr[174] = -2;
  result_value_ptr[175] = 2;
  result_value_ptr[176] = 2;
  result_value_ptr[177] = _tmp9;
  result_value_ptr[178] = _tmp3;
  result_value_ptr[179] = -4;
  result_value_ptr[180] = _tmp20;
  result_value_ptr[181] = 4 - x0;
  result_value_ptr[182] = 2;
  result_value_ptr[183] = 1;
  result_value_ptr[184] = 3;
  result_value_ptr[185] = _tmp26;
  result_value_ptr[186] = _tmp24;
  result_value_ptr[187] = _tmp29;
  result_value_ptr[188] = _tmp5;
  result_value_ptr[189] = 2 - x0;
  result_value_ptr[190] = -_tmp17;
  result_value_ptr[191] = -_tmp30;
  result_value_ptr[192] = _tmp11;
  result_value_ptr[193] = x1;
  result_value_ptr[194] = _tmp8;
  result_value_ptr[195] = 2;
  result_value_ptr[196] = _tmp29;
  result_value_ptr[197] = 4;
  result_value_ptr[198] = _tmp26;
  result_value_ptr[199] = _tmp10 + _tmp23;
  result_value_ptr[200] = 1;
  result_value_ptr[201] = -1;
  result_value_ptr[202] = _tmp27;
  result_value_ptr[203] = _tmp3 + 1;
  result_value_ptr[204] = _tmp28;
  result_value_ptr[205] = -4;
  result_value_ptr[206] = -6;
  result_value_ptr[207] = _tmp8;
  result_value_ptr[208] = _tmp9;
  result_value_ptr[209] = _tmp5;
  result_value_ptr[210] = 1;
  result_value_ptr[211] = 1;
  result_value_ptr[212] = -Scalar(1) / Scalar(2) * x0;
  result_value_ptr[213] = -2;
  result_value_ptr[214] = _tmp21;
  result_value_ptr[215] = 3;
  result_value_ptr[216] = 2 / x1;
  result_value_ptr[217] = _tmp30;
  result_value_ptr[218] = _tmp3 - 1;
  result_value_ptr[219] = _tmp22;
  result_value_ptr[220] = Scalar(1.0);
  result_value_ptr[221] = x1 + 4;
  result_value_ptr[222] = -3 * x1;
  result_value_ptr[223] = -2;
  result_value_ptr[224] = _tmp5;
  result_value_ptr[225] = _tmp19;
  result_value_ptr[226] = _tmp28;
  result_value_ptr[227] = 2;
  result_value_ptr[228] = _tmp23;
  result_value_ptr[229] = Scalar(-2.0);
  result_value_ptr[230] = _tmp4;
  result_value_ptr[231] = -_tmp0;
  result_value_ptr[232] = _tmp3;
  result_value_ptr[233] = _tmp9;
  result_value_ptr[234] = 3;
  result_value_ptr[235] = x0;
  result_value_ptr[236] = -4;

  return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
