// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <Eigen/Sparse>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     x0: Scalar
 *     x1: Scalar
 *
 * Outputs:
 *     result: Matrix36_84
 *
 */
template <typename Scalar>
Eigen::SparseMatrix<Scalar> Bibd93ComputeB(const Scalar x0, const Scalar x1) {
  // Total ops: 113

  // Input arrays

  // Intermediate terms (36)
  const Scalar _tmp0 = Scalar(1.0) / (x0);
  const Scalar _tmp1 = 2 * _tmp0;
  const Scalar _tmp2 = x1 + 2;
  const Scalar _tmp3 = x0 * x1;
  const Scalar _tmp4 = -_tmp3;
  const Scalar _tmp5 = (Scalar(1) / Scalar(2)) * x1;
  const Scalar _tmp6 = x1 - 1;
  const Scalar _tmp7 = 2 * x1;
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = 2 * x0;
  const Scalar _tmp10 = _tmp9 - 4;
  const Scalar _tmp11 = -x1;
  const Scalar _tmp12 = _tmp11 + x0;
  const Scalar _tmp13 = x0 + x1;
  const Scalar _tmp14 = x1 - 3;
  const Scalar _tmp15 = x0 - 1;
  const Scalar _tmp16 = -_tmp9;
  const Scalar _tmp17 = -x0;
  const Scalar _tmp18 = _tmp7 - 4;
  const Scalar _tmp19 = x0 - 2;
  const Scalar _tmp20 = -_tmp19;
  const Scalar _tmp21 = x1 + 4;
  const Scalar _tmp22 = x1 - 2;
  const Scalar _tmp23 = -_tmp22;
  const Scalar _tmp24 = x1 + 1;
  const Scalar _tmp25 = x0 + 1;
  const Scalar _tmp26 = x0 + 2;
  const Scalar _tmp27 = -_tmp25;
  const Scalar _tmp28 = -_tmp24;
  const Scalar _tmp29 = _tmp7 - 2;
  const Scalar _tmp30 = -_tmp6;
  const Scalar _tmp31 = 4 * x1;
  const Scalar _tmp32 = -_tmp26;
  const Scalar _tmp33 = std::pow(x0, Scalar(2));
  const Scalar _tmp34 = -_tmp33;
  const Scalar _tmp35 = -_tmp15;

  // Output terms (1)
  static constexpr int kRows_result = 36;
  static constexpr int kCols_result = 84;
  static constexpr int kNumNonZero_result = 246;
  static constexpr int kColPtrs_result[] = {
      0,   2,   4,   7,   10,  13,  16,  19,  22,  25,  28,  31,  34,  37,  40,  43,  46,
      49,  52,  55,  58,  61,  64,  67,  70,  73,  76,  79,  81,  83,  86,  89,  92,  95,
      98,  101, 104, 107, 110, 113, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146,
      149, 152, 155, 158, 161, 164, 167, 170, 173, 176, 179, 181, 184, 187, 190, 193, 196,
      198, 201, 204, 207, 210, 213, 216, 219, 222, 225, 228, 231, 234, 237, 240, 243, 246};
  static constexpr int kRowIndices_result[] = {
      0,  8,  2,  9,  0,  3,  10, 0,  4,  11, 0,  5,  12, 0,  6,  13, 0,  7,  14, 1,  2,  15, 1,
      3,  16, 1,  4,  17, 1,  5,  18, 1,  6,  19, 1,  7,  20, 2,  3,  21, 2,  4,  22, 2,  5,  23,
      2,  6,  24, 2,  7,  25, 3,  4,  26, 3,  5,  27, 3,  6,  28, 3,  7,  29, 4,  5,  30, 4,  6,
      31, 4,  7,  32, 5,  6,  33, 5,  7,  34, 6,  7,  9,  15, 8,  10, 16, 8,  11, 17, 8,  12, 18,
      8,  13, 19, 8,  14, 20, 9,  10, 21, 9,  11, 22, 9,  12, 23, 9,  13, 24, 9,  14, 25, 10, 11,
      26, 10, 12, 27, 10, 13, 28, 10, 14, 29, 11, 12, 30, 11, 13, 31, 11, 14, 32, 12, 13, 33, 12,
      14, 34, 13, 14, 35, 15, 16, 21, 15, 17, 22, 15, 18, 23, 15, 19, 24, 15, 20, 25, 16, 17, 26,
      16, 18, 27, 16, 19, 28, 16, 20, 29, 17, 18, 30, 17, 19, 31, 17, 20, 32, 18, 19, 18, 20, 34,
      19, 20, 35, 21, 22, 26, 21, 23, 27, 21, 24, 28, 21, 29, 22, 23, 30, 22, 24, 31, 22, 25, 32,
      23, 24, 33, 23, 25, 34, 24, 25, 35, 26, 27, 30, 26, 28, 31, 26, 29, 32, 27, 28, 33, 27, 29,
      34, 28, 29, 35, 30, 31, 33, 30, 32, 34, 31, 32, 35, 33, 34, 35};
  Scalar result_empty_value_ptr[246];
  Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
      kRows_result, kCols_result, kNumNonZero_result, kColPtrs_result, kRowIndices_result,
      result_empty_value_ptr);
  Scalar* result_value_ptr = result.valuePtr();

  result_value_ptr[0] = -_tmp1;
  result_value_ptr[1] = _tmp0;
  result_value_ptr[2] = -2;
  result_value_ptr[3] = -2;
  result_value_ptr[4] = 3;
  result_value_ptr[5] = _tmp2;
  result_value_ptr[6] = x1;
  result_value_ptr[7] = -1;
  result_value_ptr[8] = Scalar(2.0);
  result_value_ptr[9] = -4;
  result_value_ptr[10] = _tmp4;
  result_value_ptr[11] = _tmp5;
  result_value_ptr[12] = -_tmp0 * x1;
  result_value_ptr[13] = -2;
  result_value_ptr[14] = _tmp0;
  result_value_ptr[15] = -_tmp6 * x1;
  result_value_ptr[16] = _tmp8;
  result_value_ptr[17] = _tmp7;
  result_value_ptr[18] = -_tmp10;
  result_value_ptr[19] = -1;
  result_value_ptr[20] = _tmp11;
  result_value_ptr[21] = 3 * x1;
  result_value_ptr[22] = 2;
  result_value_ptr[23] = 2;
  result_value_ptr[24] = _tmp12;
  result_value_ptr[25] = -1;
  result_value_ptr[26] = _tmp5;
  result_value_ptr[27] = -Scalar(1.0) * _tmp0;
  result_value_ptr[28] = _tmp13;
  result_value_ptr[29] = 2;
  result_value_ptr[30] = -2;
  result_value_ptr[31] = -2;
  result_value_ptr[32] = -2;
  result_value_ptr[33] = -_tmp12;
  result_value_ptr[34] = 2;
  result_value_ptr[35] = _tmp14;
  result_value_ptr[36] = _tmp8;
  result_value_ptr[37] = 4;
  result_value_ptr[38] = 2;
  result_value_ptr[39] = x0;
  result_value_ptr[40] = 2;
  result_value_ptr[41] = -1;
  result_value_ptr[42] = _tmp9;
  result_value_ptr[43] = x0;
  result_value_ptr[44] = 1;
  result_value_ptr[45] = -1;
  result_value_ptr[46] = -1;
  result_value_ptr[47] = 2;
  result_value_ptr[48] = _tmp15;
  result_value_ptr[49] = _tmp16;
  result_value_ptr[50] = _tmp17;
  result_value_ptr[51] = _tmp18;
  result_value_ptr[52] = _tmp20;
  result_value_ptr[53] = _tmp7;
  result_value_ptr[54] = 2;
  result_value_ptr[55] = _tmp21;
  result_value_ptr[56] = 1;
  result_value_ptr[57] = _tmp11;
  result_value_ptr[58] = _tmp23;
  result_value_ptr[59] = x1;
  result_value_ptr[60] = _tmp13;
  result_value_ptr[61] = Scalar(1.0);
  result_value_ptr[62] = _tmp17 + _tmp24;
  result_value_ptr[63] = Scalar(-1.0);
  result_value_ptr[64] = x0;
  result_value_ptr[65] = _tmp4;
  result_value_ptr[66] = x0;
  result_value_ptr[67] = x0;
  result_value_ptr[68] = 2;
  result_value_ptr[69] = _tmp25;
  result_value_ptr[70] = _tmp23;
  result_value_ptr[71] = 4;
  result_value_ptr[72] = _tmp11;
  result_value_ptr[73] = 4;
  result_value_ptr[74] = 4;
  result_value_ptr[75] = 2;
  result_value_ptr[76] = -_tmp5;
  result_value_ptr[77] = -2;
  result_value_ptr[78] = _tmp17;
  result_value_ptr[79] = _tmp1;
  result_value_ptr[80] = _tmp26;
  result_value_ptr[81] = _tmp27;
  result_value_ptr[82] = 3;
  result_value_ptr[83] = _tmp28;
  result_value_ptr[84] = Scalar(2.0);
  result_value_ptr[85] = -1;
  result_value_ptr[86] = _tmp16;
  result_value_ptr[87] = -std::pow(x1, Scalar(2));
  result_value_ptr[88] = _tmp22;
  result_value_ptr[89] = x0;
  result_value_ptr[90] = x0;
  result_value_ptr[91] = _tmp15;
  result_value_ptr[92] = 1;
  result_value_ptr[93] = x1;
  result_value_ptr[94] = x1;
  result_value_ptr[95] = -3;
  result_value_ptr[96] = 1;
  result_value_ptr[97] = _tmp15;
  result_value_ptr[98] = -2;
  result_value_ptr[99] = -2;
  result_value_ptr[100] = -2;
  result_value_ptr[101] = _tmp21;
  result_value_ptr[102] = 2;
  result_value_ptr[103] = (Scalar(1) / Scalar(2)) * x0;
  result_value_ptr[104] = _tmp19;
  result_value_ptr[105] = Scalar(1.0);
  result_value_ptr[106] = x1;
  result_value_ptr[107] = _tmp17;
  result_value_ptr[108] = _tmp12 + 2;
  result_value_ptr[109] = Scalar(0.5);
  result_value_ptr[110] = x1;
  result_value_ptr[111] = 1;
  result_value_ptr[112] = _tmp14;
  result_value_ptr[113] = -_tmp29;
  result_value_ptr[114] = _tmp23;
  result_value_ptr[115] = _tmp9;
  result_value_ptr[116] = 1;
  result_value_ptr[117] = _tmp9;
  result_value_ptr[118] = 1;
  result_value_ptr[119] = _tmp29;
  result_value_ptr[120] = -4;
  result_value_ptr[121] = 4;
  result_value_ptr[122] = 1;
  result_value_ptr[123] = _tmp30;
  result_value_ptr[124] = _tmp11;
  result_value_ptr[125] = Scalar(2.0);
  result_value_ptr[126] = -2;
  result_value_ptr[127] = 6;
  result_value_ptr[128] = -_tmp31;
  result_value_ptr[129] = _tmp12;
  result_value_ptr[130] = 2;
  result_value_ptr[131] = -3;
  result_value_ptr[132] = -1;
  result_value_ptr[133] = _tmp22;
  result_value_ptr[134] = -1;
  result_value_ptr[135] = -2;
  result_value_ptr[136] = _tmp32;
  result_value_ptr[137] = _tmp34;
  result_value_ptr[138] = _tmp24;
  result_value_ptr[139] = _tmp22;
  result_value_ptr[140] = -2;
  result_value_ptr[141] = 4;
  result_value_ptr[142] = _tmp16;
  result_value_ptr[143] = -1;
  result_value_ptr[144] = _tmp4;
  result_value_ptr[145] = 2;
  result_value_ptr[146] = -2;
  result_value_ptr[147] = 3 * x0;
  result_value_ptr[148] = _tmp20;
  result_value_ptr[149] = _tmp9;
  result_value_ptr[150] = _tmp11;
  result_value_ptr[151] = x0;
  result_value_ptr[152] = 2;
  result_value_ptr[153] = -2;
  result_value_ptr[154] = _tmp34;
  result_value_ptr[155] = _tmp17;
  result_value_ptr[156] = _tmp27;
  result_value_ptr[157] = _tmp11;
  result_value_ptr[158] = 4;
  result_value_ptr[159] = Scalar(1.0) / (_tmp25);
  result_value_ptr[160] = _tmp11;
  result_value_ptr[161] = x0;
  result_value_ptr[162] = _tmp33 + x1;
  result_value_ptr[163] = _tmp17;
  result_value_ptr[164] = 4;
  result_value_ptr[165] = -2;
  result_value_ptr[166] = -2;
  result_value_ptr[167] = 3 - x0;
  result_value_ptr[168] = x0;
  result_value_ptr[169] = _tmp28;
  result_value_ptr[170] = 1;
  result_value_ptr[171] = x1;
  result_value_ptr[172] = x0;
  result_value_ptr[173] = -2;
  result_value_ptr[174] = 1;
  result_value_ptr[175] = _tmp4;
  result_value_ptr[176] = _tmp16;
  result_value_ptr[177] = _tmp30;
  result_value_ptr[178] = _tmp26;
  result_value_ptr[179] = -_tmp7 - _tmp9;
  result_value_ptr[180] = _tmp17;
  result_value_ptr[181] = _tmp8;
  result_value_ptr[182] = -2;
  result_value_ptr[183] = _tmp16;
  result_value_ptr[184] = 2;
  result_value_ptr[185] = _tmp35;
  result_value_ptr[186] = _tmp18;
  result_value_ptr[187] = _tmp9;
  result_value_ptr[188] = x0;
  result_value_ptr[189] = 2;
  result_value_ptr[190] = 2;
  result_value_ptr[191] = _tmp31;
  result_value_ptr[192] = -1;
  result_value_ptr[193] = 4;
  result_value_ptr[194] = 3;
  result_value_ptr[195] = _tmp32;
  result_value_ptr[196] = x0;
  result_value_ptr[197] = -2;
  result_value_ptr[198] = _tmp7;
  result_value_ptr[199] = _tmp2 + x0;
  result_value_ptr[200] = x1;
  result_value_ptr[201] = _tmp30;
  result_value_ptr[202] = 2 * _tmp3;
  result_value_ptr[203] = _tmp32;
  result_value_ptr[204] = 1;
  result_value_ptr[205] = 1;
  result_value_ptr[206] = x0 + 3;
  result_value_ptr[207] = _tmp19;
  result_value_ptr[208] = _tmp26;
  result_value_ptr[209] = _tmp13 + 1;
  result_value_ptr[210] = _tmp3 + 2;
  result_value_ptr[211] = x1 - 4;
  result_value_ptr[212] = 1;
  result_value_ptr[213] = 3;
  result_value_ptr[214] = _tmp10;
  result_value_ptr[215] = -4;
  result_value_ptr[216] = -_tmp2;
  result_value_ptr[217] = 2;
  result_value_ptr[218] = 1;
  result_value_ptr[219] = x0;
  result_value_ptr[220] = _tmp23;
  result_value_ptr[221] = _tmp16;
  result_value_ptr[222] = 6;
  result_value_ptr[223] = 3;
  result_value_ptr[224] = -1;
  result_value_ptr[225] = _tmp35;
  result_value_ptr[226] = 2;
  result_value_ptr[227] = -4;
  result_value_ptr[228] = -2;
  result_value_ptr[229] = _tmp26;
  result_value_ptr[230] = _tmp26;
  result_value_ptr[231] = _tmp30;
  result_value_ptr[232] = _tmp7 + x0;
  result_value_ptr[233] = 1;
  result_value_ptr[234] = x0;
  result_value_ptr[235] = _tmp25;
  result_value_ptr[236] = _tmp30;
  result_value_ptr[237] = _tmp7;
  result_value_ptr[238] = _tmp16;
  result_value_ptr[239] = -1;
  result_value_ptr[240] = x0;
  result_value_ptr[241] = (Scalar(3) / Scalar(2)) * x0;
  result_value_ptr[242] = _tmp8;
  result_value_ptr[243] = -2 / x1;
  result_value_ptr[244] = _tmp8;
  result_value_ptr[245] = -2;

  return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
