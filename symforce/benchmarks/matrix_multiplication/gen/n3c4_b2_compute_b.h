// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <Eigen/Sparse>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     x0: Scalar
 *     x1: Scalar
 *
 * Outputs:
 *     result: Matrix20_15
 *
 */
template <typename Scalar>
Eigen::SparseMatrix<Scalar> N3C4B2ComputeB(const Scalar x0, const Scalar x1) {
  // Total ops: 39

  // Input arrays

  // Intermediate terms (9)
  const Scalar _tmp0 = 2 * x0;
  const Scalar _tmp1 = -_tmp0;
  const Scalar _tmp2 = x0 + 2;
  const Scalar _tmp3 = -_tmp2;
  const Scalar _tmp4 = x1 + 1;
  const Scalar _tmp5 = Scalar(1.0) / (x0);
  const Scalar _tmp6 = (Scalar(1) / Scalar(2)) * x0;
  const Scalar _tmp7 = x1 - 1;
  const Scalar _tmp8 = x1 + 2;

  // Output terms (1)
  static constexpr int kRows_result = 20;
  static constexpr int kCols_result = 15;
  static constexpr int kNumNonZero_result = 56;
  static constexpr int kColPtrs_result[] = {0,  3,  7,  11, 15, 18, 22, 25,
                                            29, 33, 37, 41, 45, 49, 53, 56};
  static constexpr int kRowIndices_result[] = {
      9,  18, 19, 8, 14, 17, 19, 7,  13, 16, 19, 6,  12, 17, 18, 5,  11, 16, 4,
      10, 16, 17, 3, 14, 15, 2,  11, 13, 15, 1,  10, 13, 14, 0,  10, 11, 12, 3,
      6,  8,  9,  2, 5,  7,  9,  1,  4,  7,  8,  0,  4,  5,  6,  0,  1,  3};
  Scalar result_empty_value_ptr[56];
  Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
      kRows_result, kCols_result, kNumNonZero_result, kColPtrs_result, kRowIndices_result,
      result_empty_value_ptr);
  Scalar* result_value_ptr = result.valuePtr();

  result_value_ptr[0] = _tmp1;
  result_value_ptr[1] = _tmp1;
  result_value_ptr[2] = 1;
  result_value_ptr[3] = -1;
  result_value_ptr[4] = _tmp0;
  result_value_ptr[5] = _tmp0;
  result_value_ptr[6] = -1 / (x1 - 2);
  result_value_ptr[7] = 2;
  result_value_ptr[8] = x0 - 1;
  result_value_ptr[9] = _tmp2;
  result_value_ptr[10] = 2;
  result_value_ptr[11] = _tmp3;
  result_value_ptr[12] = 3 * x1;
  result_value_ptr[13] = 2;
  result_value_ptr[14] = _tmp1;
  result_value_ptr[15] = 1;
  result_value_ptr[16] = _tmp4 + x0;
  result_value_ptr[17] = -4;
  result_value_ptr[18] = -2;
  result_value_ptr[19] = -1;
  result_value_ptr[20] = 2;
  result_value_ptr[21] = -_tmp5 * x1;
  result_value_ptr[22] = x1;
  result_value_ptr[23] = x1;
  result_value_ptr[24] = x0 - x1;
  result_value_ptr[25] = Scalar(2.0);
  result_value_ptr[26] = x0;
  result_value_ptr[27] = -4;
  result_value_ptr[28] = _tmp0 + 2;
  result_value_ptr[29] = x0;
  result_value_ptr[30] = _tmp6 + Scalar(1) / Scalar(2);
  result_value_ptr[31] = -1;
  result_value_ptr[32] = 4;
  result_value_ptr[33] = x0;
  result_value_ptr[34] = 2 - x0;
  result_value_ptr[35] = _tmp0;
  result_value_ptr[36] = _tmp3;
  result_value_ptr[37] = _tmp6;
  result_value_ptr[38] = 2;
  result_value_ptr[39] = x1;
  result_value_ptr[40] = -_tmp7;
  result_value_ptr[41] = -2;
  result_value_ptr[42] = _tmp8;
  result_value_ptr[43] = -_tmp5;
  result_value_ptr[44] = 8;
  result_value_ptr[45] = _tmp1;
  result_value_ptr[46] = -4 * x1;
  result_value_ptr[47] = -2;
  result_value_ptr[48] = _tmp7;
  result_value_ptr[49] = -_tmp8;
  result_value_ptr[50] = _tmp4;
  result_value_ptr[51] = 2 * x1;
  result_value_ptr[52] = 2;
  result_value_ptr[53] = -_tmp0 - x1;
  result_value_ptr[54] = -4;
  result_value_ptr[55] = 1;

  return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
