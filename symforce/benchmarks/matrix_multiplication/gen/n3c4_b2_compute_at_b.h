// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     x0: Scalar
 *     x1: Scalar
 *
 * Outputs:
 *     result: Matrix15_15
 *
 */
template <typename Scalar>
__attribute__((noinline)) Eigen::Matrix<Scalar, 15, 15> N3C4B2ComputeAtB(const Scalar x0,
                                                                         const Scalar x1) {
  // Total ops: 169

  // Input arrays

  // Intermediate terms (43)
  const Scalar _tmp0 = 4 * x0;
  const Scalar _tmp1 = x1 - 2;
  const Scalar _tmp2 = Scalar(1.0) / (_tmp1);
  const Scalar _tmp3 = -_tmp0;
  const Scalar _tmp4 = -x1;
  const Scalar _tmp5 = _tmp4 + x0;
  const Scalar _tmp6 = 2 * x0;
  const Scalar _tmp7 = _tmp6 + 2;
  const Scalar _tmp8 = x0 + 3;
  const Scalar _tmp9 = std::pow(x0, Scalar(2));
  const Scalar _tmp10 = -4 * _tmp9;
  const Scalar _tmp11 = x1 + 1;
  const Scalar _tmp12 = x1 + 2;
  const Scalar _tmp13 = 2 * x1;
  const Scalar _tmp14 = -_tmp13;
  const Scalar _tmp15 = 4 * x1;
  const Scalar _tmp16 = _tmp12 * x1;
  const Scalar _tmp17 = x1 - 1;
  const Scalar _tmp18 = x0 + 2;
  const Scalar _tmp19 = _tmp13 * _tmp18;
  const Scalar _tmp20 = -_tmp6;
  const Scalar _tmp21 = -_tmp0 * x1;
  const Scalar _tmp22 = 3 * x0;
  const Scalar _tmp23 = 3 * x1;
  const Scalar _tmp24 = x0 * x1;
  const Scalar _tmp25 = _tmp6 * x1;
  const Scalar _tmp26 = -_tmp18 * x0;
  const Scalar _tmp27 = (Scalar(1) / Scalar(2)) * x0 + Scalar(1) / Scalar(2);
  const Scalar _tmp28 = x0 - 2;
  const Scalar _tmp29 = _tmp11 * _tmp17;
  const Scalar _tmp30 = Scalar(2.0) * x0;
  const Scalar _tmp31 = Scalar(2.0) * x1;
  const Scalar _tmp32 = _tmp13 + 1;
  const Scalar _tmp33 = _tmp22 * x1;
  const Scalar _tmp34 = std::pow(x1, Scalar(2));
  const Scalar _tmp35 = Scalar(1.0) * x1;
  const Scalar _tmp36 = -_tmp18;
  const Scalar _tmp37 = _tmp0 + 8;
  const Scalar _tmp38 = _tmp6 - 2;
  const Scalar _tmp39 = _tmp18 * _tmp6;
  const Scalar _tmp40 = x0 + 1;
  const Scalar _tmp41 = -_tmp12 * _tmp13;
  const Scalar _tmp42 = -_tmp13 * (_tmp6 + x1);

  // Output terms (1)
  Eigen::Matrix<Scalar, 15, 15> _result;

  _result(0, 0) = 1 - _tmp0;
  _result(0, 1) = -_tmp2;
  _result(0, 2) = 2;
  _result(0, 3) = _tmp3;
  _result(0, 4) = 0;
  _result(0, 5) = 0;
  _result(0, 6) = _tmp5 * x1;
  _result(0, 7) = _tmp7 * x1;
  _result(0, 8) = 0;
  _result(0, 9) = 0;
  _result(0, 10) = 0;
  _result(0, 11) = 0;
  _result(0, 12) = 0;
  _result(0, 13) = 0;
  _result(0, 14) = 0;
  _result(1, 0) = _tmp8;
  _result(1, 1) = -_tmp10 + _tmp11 * _tmp6 - _tmp12 - _tmp2 * _tmp8;
  _result(1, 2) = _tmp6 + 6;
  _result(1, 3) = _tmp0;
  _result(1, 4) = 0;
  _result(1, 5) = _tmp14;
  _result(1, 6) = _tmp11 * x1;
  _result(1, 7) = 0;
  _result(1, 8) = _tmp15 + 4;
  _result(1, 9) = 0;
  _result(1, 10) = _tmp16;
  _result(1, 11) = 0;
  _result(1, 12) = _tmp12 * _tmp17;
  _result(1, 13) = 0;
  _result(1, 14) = 0;
  _result(2, 0) = 4;
  _result(2, 1) = -4 * _tmp2;
  _result(2, 2) = _tmp19 + 5 * x0 + 5;
  _result(2, 3) = 0;
  _result(2, 4) = -8 * x1;
  _result(2, 5) = _tmp15;
  _result(2, 6) = 0;
  _result(2, 7) = -12;
  _result(2, 8) = -3;
  _result(2, 9) = 0;
  _result(2, 10) = 0;
  _result(2, 11) = -1;
  _result(2, 12) = _tmp20;
  _result(2, 13) = 0;
  _result(2, 14) = 0;
  _result(3, 0) = _tmp21;
  _result(3, 1) = 2 * _tmp9;
  _result(3, 2) = 0;
  _result(3, 3) = -_tmp18 * _tmp23 + _tmp21 + _tmp22 + 2;
  _result(3, 4) = 0;
  _result(3, 5) = _tmp4;
  _result(3, 6) = 0;
  _result(3, 7) = 0;
  _result(3, 8) = 0;
  _result(3, 9) = std::pow(_tmp18, Scalar(2));
  _result(3, 10) = -2;
  _result(3, 11) = 0;
  _result(3, 12) = 0;
  _result(3, 13) = -2;
  _result(3, 14) = 0;
  _result(4, 0) = _tmp0;
  _result(4, 1) = 0;
  _result(4, 2) = _tmp22 + 6;
  _result(4, 3) = _tmp0;
  _result(4, 4) = x1 * (_tmp11 + x0) - 9;
  _result(4, 5) = 6;
  _result(4, 6) = 0;
  _result(4, 7) = _tmp24;
  _result(4, 8) = 0;
  _result(4, 9) = _tmp25;
  _result(4, 10) = 0;
  _result(4, 11) = _tmp23 + 6;
  _result(4, 12) = 0;
  _result(4, 13) = 6 * x1;
  _result(4, 14) = 0;
  _result(5, 0) = 0;
  _result(5, 1) = _tmp10;
  _result(5, 2) = _tmp26;
  _result(5, 3) = _tmp3;
  _result(5, 4) = _tmp0;
  _result(5, 5) = _tmp20 + _tmp24 + 2;
  _result(5, 6) = 0;
  _result(5, 7) = 0;
  _result(5, 8) = -_tmp24 * _tmp27;
  _result(5, 9) = _tmp24 * _tmp28;
  _result(5, 10) = 0;
  _result(5, 11) = 0;
  _result(5, 12) = -_tmp15 * _tmp17;
  _result(5, 13) = _tmp29;
  _result(5, 14) = 0;
  _result(6, 0) = 0;
  _result(6, 1) = _tmp3;
  _result(6, 2) = 0;
  _result(6, 3) = -_tmp1 * _tmp23;
  _result(6, 4) = 0;
  _result(6, 5) = 0;
  _result(6, 6) = _tmp12 * _tmp5 - _tmp15;
  _result(6, 7) = _tmp12 * _tmp7;
  _result(6, 8) = -8;
  _result(6, 9) = _tmp1 * _tmp18;
  _result(6, 10) = -x0;
  _result(6, 11) = 0;
  _result(6, 12) = 0;
  _result(6, 13) = 0;
  _result(6, 14) = -2;
  _result(7, 0) = 0;
  _result(7, 1) = 0;
  _result(7, 2) = 6 * x0 - 6;
  _result(7, 3) = 0;
  _result(7, 4) = _tmp30 + _tmp31 + Scalar(2.0);
  _result(7, 5) = 0;
  _result(7, 6) = _tmp32 * _tmp5;
  _result(7, 7) = _tmp30 + _tmp32 * _tmp7 + Scalar(-26.0);
  _result(7, 8) = -6;
  _result(7, 9) = Scalar(4.0) * x0;
  _result(7, 10) = 0;
  _result(7, 11) = 2;
  _result(7, 12) = 0;
  _result(7, 13) = 0;
  _result(7, 14) = 0;
  _result(8, 0) = 0;
  _result(8, 1) = 6 * _tmp9;
  _result(8, 2) = 1 - x0;
  _result(8, 3) = 0;
  _result(8, 4) = 0;
  _result(8, 5) = _tmp1;
  _result(8, 6) = _tmp33;
  _result(8, 7) = 4;
  _result(8, 8) = -_tmp1 * _tmp27 + 14 * x0 + 1;
  _result(8, 9) = _tmp1 * _tmp28;
  _result(8, 10) = 0;
  _result(8, 11) = 0;
  _result(8, 12) = _tmp3;
  _result(8, 13) = 0;
  _result(8, 14) = -8;
  _result(9, 0) = 0;
  _result(9, 1) = 0;
  _result(9, 2) = 0;
  _result(9, 3) = 6 * _tmp34;
  _result(9, 4) = 0;
  _result(9, 5) = 1;
  _result(9, 6) = 0;
  _result(9, 7) = 0;
  _result(9, 8) = -_tmp27;
  _result(9, 9) = -_tmp19 + _tmp30 - 2;
  _result(9, 10) = 0;
  _result(9, 11) = 0;
  _result(9, 12) = 0;
  _result(9, 13) = -_tmp35 + Scalar(-2.0);
  _result(9, 14) = -_tmp30 - _tmp35;
  _result(10, 0) = _tmp0;
  _result(10, 1) = _tmp36;
  _result(10, 2) = 0;
  _result(10, 3) = -_tmp37;
  _result(10, 4) = 0;
  _result(10, 5) = 0;
  _result(10, 6) = -_tmp34;
  _result(10, 7) = 0;
  _result(10, 8) = 0;
  _result(10, 9) = 0;
  _result(10, 10) = _tmp13 + _tmp18 * x1 - Scalar(1) / Scalar(2) * _tmp24 + 6;
  _result(10, 11) = -16;
  _result(10, 12) = _tmp17 * _tmp18;
  _result(10, 13) = 8;
  _result(10, 14) = _tmp4;
  _result(11, 0) = -_tmp38 * _tmp6;
  _result(11, 1) = 0;
  _result(11, 2) = _tmp6;
  _result(11, 3) = 0;
  _result(11, 4) = 1;
  _result(11, 5) = 0;
  _result(11, 6) = 0;
  _result(11, 7) = Scalar(2.0);
  _result(11, 8) = 0;
  _result(11, 9) = 0;
  _result(11, 10) = -_tmp17 * _tmp38;
  _result(11, 11) = 16 * x0 + x1 - 17;
  _result(11, 12) = _tmp20;
  _result(11, 13) = _tmp13;
  _result(11, 14) = 0;
  _result(12, 0) = 0;
  _result(12, 1) = _tmp4;
  _result(12, 2) = _tmp13;
  _result(12, 3) = 0;
  _result(12, 4) = 0;
  _result(12, 5) = _tmp13 - 2;
  _result(12, 6) = 0;
  _result(12, 7) = 0;
  _result(12, 8) = _tmp26;
  _result(12, 9) = 0;
  _result(12, 10) = _tmp34;
  _result(12, 11) = -x1 / x0;
  _result(12, 12) = _tmp14 + 5 * _tmp17 * x1 + _tmp39;
  _result(12, 13) = -_tmp29;
  _result(12, 14) = _tmp37;
  _result(13, 0) = 0;
  _result(13, 1) = 0;
  _result(13, 2) = 0;
  _result(13, 3) = _tmp36;
  _result(13, 4) = _tmp4;
  _result(13, 5) = -_tmp7;
  _result(13, 6) = 0;
  _result(13, 7) = 0;
  _result(13, 8) = 0;
  _result(13, 9) = _tmp25;
  _result(13, 10) = 2;
  _result(13, 11) = -_tmp16;
  _result(13, 12) = -_tmp15 * _tmp40;
  _result(13, 13) = _tmp11 * _tmp40 - 2 * _tmp34 + _tmp41 + 2;
  _result(13, 14) = _tmp42;
  _result(14, 0) = 0;
  _result(14, 1) = 0;
  _result(14, 2) = 0;
  _result(14, 3) = 0;
  _result(14, 4) = 0;
  _result(14, 5) = 0;
  _result(14, 6) = -_tmp33;
  _result(14, 7) = _tmp31;
  _result(14, 8) = _tmp26;
  _result(14, 9) = _tmp25;
  _result(14, 10) = -Scalar(3) / Scalar(2) * _tmp9;
  _result(14, 11) = _tmp14;
  _result(14, 12) = _tmp39;
  _result(14, 13) = _tmp41;
  _result(14, 14) = _tmp42 + x0 + 8;

  return _result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
